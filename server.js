const express = require('express');
const app = express();

// ==================== CONFIGURACI√ìN B√ÅSICA ====================
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ==================== DATOS COMPLETOS DE HYPNOTTICA ====================
const HYPNOTTICA = {
  // üìç INFORMACI√ìN DE LA √ìPTICA
  informacion: {
    nombre: "Hypnottica",
    direccion: "Serrano 684, Villa Crespo, CABA",
    horarios: "Lunes a S√°bado de 10:30 a 19:30",
    telefono: "1132774631",
    redes: "@hypnottica en Instagram y Facebook",
    email: "solo proveedores"
  },

  // üè• OBRAS SOCIALES
  obrasSociales: {
    aceptadas: ["Medicus", "Osetya", "Construir Salud", "Swiss Medical"],
    requisitos: {
      receta: "Debe detallar de manera precisa el tipo de lente solicitado",
      documentacion: "N√∫mero de credencial, datos del paciente, sello del m√©dico y receta vigente",
      vigencia: "60 d√≠as corridos desde su emisi√≥n",
      restricciones: "La cobertura es √∫nicamente para lo indicado en la receta"
    },
    promociones: "Actualmente no contamos con promociones adicionales"
  },

  // üëì PRODUCTOS
  productos: {
    armazones: "Disponibles en stock (consultar modelos)",
    lentesContacto: {
      marcas: ["Acuvue", "Biofinity", "Air Optix"],
      tipos: ["diarios", "mensuales", "anuales"],
      nota: "Los anuales casi no se utilizan actualmente por mayor riesgo y cuidado"
    },
    liquidos: "Marcas y tama√±os disponibles (consultar)",
    accesorios: "Estuches, pa√±os, l√≠quidos y otros accesorios",
    servicios: "Ajustes y reparaciones (evaluaci√≥n en persona)"
  },

  // üí∞ PRECIOS Y PROMOCIONES
  precios: {
    rangoArmazones: "$55.000 hasta $370.000 (solo armaz√≥n)",
    promociones: [
      "3 cuotas sin inter√©s a partir de $100.000",
      "6 cuotas sin inter√©s a partir de $200.000",
      "10% de descuento abonando en efectivo (totalidad en efectivo)"
    ],
    mediosPago: ["efectivo", "QR", "tarjetas de cr√©dito/d√©bito"]
  },

  // üó£Ô∏è PALABRAS CLAVE
  palabrasClave: {
    saludos: [
      "hola", "buenas", "holis", "hey", "qu√© tal", "c√≥mo and√°s", "c√≥mo andan",
      "buen d√≠a", "buenas tardes", "buenas noches", "qu√© hac√©s", "c√≥mo va",
      "saludos", "ey", "buenas ¬øtodo bien?", "holaaa"
    ],
    despedidas: [
      "chau", "gracias", "nos vemos", "adi√≥s", "hasta luego", "hasta pronto",
      "hasta ma√±ana", "hasta la pr√≥xima", "cuidate", "cu√≠dense", "un saludo",
      "suerte", "que est√©s bien", "que les vaya bien", "abrazo", "besos",
      "hablamos", "chaooo"
    ],
    sinonimosProductos: [
      "lentes", "anteojos", "gafas", "espejuelos", "gafas de sol", "lentes de sol",
      "lentes recetados", "anteojos recetados", "lentes de aumento", "lentes graduados",
      "monturas", "armazones", "cristales", "lentillas", "lentes de contacto",
      "pupilentes", "gafas √≥pticas", "gafas de lectura", "multifocales", "bifocales",
      "progresivos", "lentes para computadora", "lentes de cerca", "lentes de lejos"
    ]
  },

  // ‚è∞ TIEMPOS DE ENTREGA
  tiemposEntrega: {
    particulares: "1 d√≠a a 1 semana (seg√∫n tipo de cristal)",
    obraSocial: "alrededor de 2 semanas",
    lentesContactoOS: "2 a 4 semanas"
  }
};

// ==================== SISTEMA DE MEMORIA MEJORADO ====================
class MemoryService {
  constructor() {
    this.contextos = new Map();
  }

  obtenerContextoUsuario(userId) {
    if (!this.contextos.has(userId)) {
      this.contextos.set(userId, { 
        paso: 0, 
        ultimoTema: null, 
        subtema: null,
        datos: {},
        conversacion: [],
        timestamp: Date.now(),
        flujoActivo: null,
        esperandoRespuesta: null,
        historial: []
      });
    }
    return this.contextos.get(userId);
  }

  guardarContextoUsuario(userId, contexto) {
    contexto.timestamp = Date.now();
    // Mantener solo √∫ltimos 10 mensajes en historial
    if (contexto.historial && contexto.historial.length > 10) {
      contexto.historial = contexto.historial.slice(-10);
    }
    this.contextos.set(userId, contexto);
    
    this.limpiarContextosViejos();
  }

  limpiarContextosViejos() {
    const ahora = Date.now();
    for (const [userId, contexto] of this.contextos.entries()) {
      if (ahora - contexto.timestamp > 3600000) { // 1 hora
        this.contextos.delete(userId);
      }
    }
  }

  reiniciarContexto(userId) {
    this.contextos.delete(userId);
    return this.obtenerContextoUsuario(userId);
  }
}

// ==================== SISTEMA DE INTENCIONES INTELIGENTE MEJORADO ====================
class IntentRecognizer {
  detectIntent(mensaje, contexto = {}) {
    const mensajeLower = mensaje.toLowerCase().trim();
    
    // Si hay contexto previo, priorizar continuaciones
    if (contexto.esperandoRespuesta) {
      const continuacion = this.detectarContinuacion(mensajeLower, contexto);
      if (continuacion !== 'no_entendido') {
        return continuacion;
      }
    }

    // üéØ DETECCI√ìN POR CONTEXTO MEJORADA
    if (this.esSaludoContextual(mensajeLower)) return 'saludo';
    if (this.esLentesContactoContextual(mensajeLower, contexto)) return 'lentes_contacto';
    if (this.esLiquidosContextual(mensajeLower)) return 'liquidos';
    if (this.esObraSocialContextual(mensajeLower)) return 'obra_social';
    if (this.esPrecioContextual(mensajeLower)) return 'precio';
    if (this.esMarcaContextual(mensajeLower)) return 'marca';
    if (this.esHorarioContextual(mensajeLower)) return 'horario';
    if (this.esDireccionContextual(mensajeLower)) return 'direccion';
    if (this.esDespedidaContextual(mensajeLower)) return 'despedida';
    if (this.esTurnoContextual(mensajeLower)) return 'turno';
    if (this.esStockContextual(mensajeLower)) return 'stock';
    if (this.esRespuestaSimpleContextual(mensajeLower, contexto)) return 'respuesta_simple';
    
    return 'no_entendido';
  }

  detectarContinuacion(mensaje, contexto) {
    // Si est√°bamos esperando una respuesta espec√≠fica
    switch (contexto.esperandoRespuesta) {
      case 'primera_vez_contacto':
        if (mensaje.includes('si') || mensaje.includes('s√≠') || mensaje.includes('primera') || mensaje.includes('nunca') || mensaje === 'primera vez') {
          return 'primera_vez_confirmada';
        }
        if (mensaje.includes('no') || mensaje.includes('ya uso') || mensaje.includes('experiencia') || mensaje.includes('uso')) {
          return 'experiencia_confirmada';
        }
        break;
      
      case 'confirmar_mapa':
        if (mensaje.includes('si') || mensaje.includes('s√≠') || mensaje.includes('mapa')) {
          return 'mapa_confirmado';
        }
        if (mensaje.includes('no') || mensaje.includes('gracias')) {
          return 'mapa_rechazado';
        }
        break;

      case 'tipo_consulta_os':
        if (mensaje.includes('armazon') || mensaje.includes('cristal') || mensaje.includes('anteojo') || (mensaje.includes('lente') && !mensaje.includes('contacto'))) {
          return 'os_armazones';
        }
        if (mensaje.includes('contacto') || mensaje.includes('lentilla')) {
          return 'os_contacto';
        }
        break;

      case 'tipo_producto_precio':
        if (mensaje.includes('armazon') || mensaje.includes('marco') || mensaje.includes('montura')) {
          return 'precio_armazones';
        }
        if (mensaje.includes('cristal') || (mensaje.includes('lente') && !mensaje.includes('contacto'))) {
          return 'precio_cristales';
        }
        if (mensaje.includes('contacto') || mensaje.includes('lentilla')) {
          return 'precio_contacto';
        }
        break;
    }
    
    return 'no_entendido';
  }

  esSaludoContextual(mensaje) {
    const patrones = [
      /^(hola|buen(a|o|as|os)\s+(d[i√≠]a|tarde|noche)|qu√© tal|c√≥mo va|saludos|buenas|holis|hey|hi|hello)/,
      /^hola$/,
      /^buenas$/
    ];
    return patrones.some(patron => patron.test(mensaje));
  }

  esLentesContactoContextual(mensaje, contexto) {
    // Si ya est√°bamos en tema lentes de contacto, considerar respuestas relacionadas
    if (contexto.ultimoTema === 'lentes_contacto' && mensaje.length < 25) {
      return true;
    }

    const palabrasClave = ['lente', 'contacto', 'lentilla', 'pupilente'];
    const tienePalabraClave = palabrasClave.some(palabra => mensaje.includes(palabra));
    
    const palabrasConsulta = ['tienen', 'trabajan', 'venden', 'qu√©', 'que', 'cual', 'cu√°l', 'info'];
    const tieneConsulta = palabrasConsulta.some(palabra => mensaje.includes(palabra));
    
    const respuestasDirectas = ['primera vez', 'ya uso', 'nunca use', 'uso actual', 'primera'];
    const esRespuestaDirecta = respuestasDirectas.some(respuesta => mensaje.includes(respuesta));
    
    return (tienePalabraClave && (tieneConsulta || mensaje.length < 20)) || esRespuestaDirecta;
  }

  esLiquidosContextual(mensaje) {
    const palabrasClave = ['l√≠quido', 'liquido', 'soluci√≥n', 'solucion', 'limpieza'];
    const tienePalabraClave = palabrasClave.some(palabra => mensaje.includes(palabra));
    
    const palabrasConsulta = ['tienen', 'qu√©', 'que', 'recomienda', 'recomendaci√≥n'];
    const tieneConsulta = palabrasConsulta.some(palabra => mensaje.includes(palabra));
    
    return tienePalabraClave && (tieneConsulta || mensaje.length < 15);
  }

  esObraSocialContextual(mensaje) {
    const obrasSociales = ['medicus', 'swiss', 'osetya', 'construir'];
    const tieneOS = obrasSociales.some(os => mensaje.includes(os));
    
    const palabrasOS = ['obra social', 'prepaga', 'cobertura', 'plan m√©dico'];
    const tienePalabraOS = palabrasOS.some(palabra => mensaje.includes(palabra));
    
    return tieneOS || tienePalabraOS;
  }

  esPrecioContextual(mensaje) {
    const palabrasPrecio = ['precio', 'cuesta', 'valor', 'cuanto', 'cu√°nto', '$'];
    return palabrasPrecio.some(palabra => mensaje.includes(palabra));
  }

  esMarcaContextual(mensaje) {
    const marcas = ['ray-ban', 'oakley', 'vulk', 'acuvue', 'biofinity', 'air optix', 'renu', 'opti-free'];
    const tieneMarca = marcas.some(marca => mensaje.includes(marca));
    
    const palabrasMarca = ['marca', 'modelo', 'fabricante'];
    const tienePalabraMarca = palabrasMarca.some(palabra => mensaje.includes(palabra));
    
    return tieneMarca || tienePalabraMarca;
  }

  esHorarioContextual(mensaje) {
    const palabrasHorario = ['horario', 'hora', 'abren', 'cierran', 'atenci√≥n', 'cuando'];
    return palabrasHorario.some(palabra => mensaje.includes(palabra));
  }

  esDireccionContextual(mensaje) {
    const palabrasDireccion = ['direccion', 'ubicacion', 'd√≥nde', 'donde', 'local', 'direcci√≥n'];
    return palabrasDireccion.some(palabra => mensaje.includes(palabra));
  }

  esDespedidaContextual(mensaje) {
    const palabrasDespedida = ['chau', 'gracias', 'adi√≥s', 'bye', 'nos vemos', 'hasta luego'];
    return palabrasDespedida.some(palabra => mensaje.includes(palabra));
  }

  esTurnoContextual(mensaje) {
    const palabrasTurno = ['turno', 'cita', 'reserva', 'agendar'];
    return palabrasTurno.some(palabra => mensaje.includes(palabra));
  }

  esStockContextual(mensaje) {
    const palabrasStock = ['stock', 'disponible', 'queda', 'tienen'];
    return palabrasStock.some(palabra => mensaje.includes(palabra));
  }

  esRespuestaSimpleContextual(mensaje, contexto) {
    // Si el mensaje es corto y hay contexto previo, es probablemente una respuesta
    if (mensaje.length < 20 && contexto.ultimoTema && contexto.paso > 0) {
      return true;
    }
    
    const respuestasSimples = ['si', 's√≠', 'no', 'claro', 'dale', 'ok', 'perfecto', 'gracias'];
    return respuestasSimples.includes(mensaje);
  }
}

// ==================== MANEJADOR DE RESPUESTAS - VERSI√ìN MEJORADA ====================
class ResponseHandler {
  constructor() {
    this.recognizer = new IntentRecognizer();
    this.saludos = [
      "¬°Hola! Soy Luna üëã, la asistente de la √≥ptica. ¬øQuer√©s que te ayude con obras sociales, precios, marcas, horarios, direcci√≥n, lentes de contacto o l√≠quidos?",
      "¬°Bienvenido/a! Soy Luna üåô. Contame, ¬øte interesa saber sobre obras sociales, precios, horarios o lentes de contacto?",
      "¬°Hola! Soy Luna üòä Te atiendo desde la √≥ptica. ¬øConsult√°s por obras sociales, precios, horarios, direcci√≥n, lentes de contacto o l√≠quidos?"
    ];
  }

  async generarRespuesta(mensaje, contexto = { paso: 0, ultimoTema: null, subtema: null, datos: {}, esperandoRespuesta: null }) {
    const mensajeLower = mensaje.toLowerCase().trim();
    
    // üéØ REINICIAR CONTEXTO SI ES UN SALUDO NUEVO
    if (this.recognizer.esSaludoContextual(mensajeLower) && contexto.paso === 0) {
      contexto = { 
        paso: 1, 
        ultimoTema: 'saludo', 
        subtema: null, 
        datos: {}, 
        esperandoRespuesta: null, 
        historial: [] 
      };
    }

    // üéØ DETECCI√ìN DE PROBLEMAS DE SALUD - DERIVACI√ìN INMEDIATA
    if (this.detectarProblemaSalud(mensajeLower)) {
      contexto.esperandoRespuesta = null;
      return "ü©∫ Por tu seguridad, prefiero pasarte con un especialista humano que pueda orientarte mejor. ¬øUn momento por favor?";
    }

    const intent = this.recognizer.detectIntent(mensajeLower, contexto);
    
    // üéØ AGREGAR AL HISTORIAL
    if (!contexto.historial) contexto.historial = [];
    contexto.historial.push({ 
      mensaje, 
      intent, 
      timestamp: Date.now(),
      ultimoTema: contexto.ultimoTema,
      esperandoRespuesta: contexto.esperandoRespuesta
    });

    console.log('üîç Intent detectado:', { 
      mensaje,
      intent, 
      ultimoTema: contexto.ultimoTema, 
      paso: contexto.paso,
      esperando: contexto.esperandoRespuesta 
    });

    // üéØ MANEJO DE FLUJO CONVERSACIONAL MEJORADO
    if (contexto.esperandoRespuesta) {
      const respuesta = this.continuarFlujoConversacional(mensajeLower, contexto, intent);
      if (respuesta) return respuesta;
    }

    // üéØ DETECCI√ìN DE NUEVOS TEMAS (turnos, stock)
    if (intent === 'turno') {
      contexto.ultimoTema = 'turnos';
      return this.manejarTurnos(mensajeLower, contexto);
    }
    
    if (intent === 'stock') {
      contexto.ultimoTema = 'stock';
      return this.manejarStock(mensajeLower, contexto);
    }

    // üéØ CONVERSACI√ìN INICIAL O CAMBIO DE TEMA
    contexto.paso = contexto.paso + 1;
    
    switch (intent) {
      case 'saludo':
        contexto.ultimoTema = 'saludo';
        contexto.esperandoRespuesta = null;
        return this.saludos[Math.floor(Math.random() * this.saludos.length)];
      
      case 'lentes_contacto':
        contexto.ultimoTema = 'lentes_contacto';
        contexto.esperandoRespuesta = 'primera_vez_contacto';
        return "üëÅÔ∏è ¬°S√≠! Trabajamos con lentes de contacto. ¬øEs tu primera vez o ya los us√°s?";
      
      case 'obra_social':
        contexto.ultimoTema = 'obra_social';
        contexto.esperandoRespuesta = 'tipo_consulta_os';
        return "üè• S√≠, trabajamos con Medicus, Osetya, Construir Salud y Swiss Medical. ¬øTu consulta es por armazones/cristales o por lentes de contacto?";
      
      case 'precio':
        contexto.ultimoTema = 'precio';
        contexto.esperandoRespuesta = 'tipo_producto_precio';
        return "üí≤ Los precios dependen de si busc√°s armazones, cristales o lentes de contacto. ¬øPor cu√°l te gustar√≠a empezar?";
      
      case 'marca':
        contexto.ultimoTema = 'marca';
        contexto.esperandoRespuesta = 'tipo_producto_marca';
        return "üëì Tenemos variedad de marcas y opciones tanto en armazones como en lentes de contacto y cristales. ¬øQuer√©s que te cuente por armazones, lentes de contacto o cristales?";
      
      case 'horario':
        contexto.ultimoTema = 'horario';
        contexto.esperandoRespuesta = null;
        return "‚è∞ Abrimos de lunes a s√°bado de 10:30 a 19:30. ¬øTe sirve alg√∫n d√≠a en particular?";
      
      case 'direccion':
        contexto.ultimoTema = 'direccion';
        contexto.esperandoRespuesta = 'confirmar_mapa';
        return "üìç Estamos en Serrano 684, Villa Crespo. ¬øQuer√©s que te comparta un mapa de Google para que llegues m√°s f√°cil?";
      
      case 'liquidos':
        contexto.ultimoTema = 'liquidos';
        contexto.esperandoRespuesta = 'tipo_liquido';
        return "üß¥ Tenemos soluciones multiuso para limpieza diaria y gotas humectantes. ¬øQu√© est√°s buscando en particular?";
      
      case 'despedida':
        contexto.ultimoTema = 'despedida';
        contexto.esperandoRespuesta = null;
        return "¬°Gracias por contactarte! Cualquier cosa, estoy ac√° para ayudarte. ¬°Que tengas un buen d√≠a! üëã";
      
      case 'respuesta_simple':
        return this.manejarRespuestaSimple(mensajeLower, contexto);
      
      default:
        contexto.esperandoRespuesta = null;
        // Intentar inferir del contexto anterior
        if (contexto.ultimoTema) {
          return this.continuarDeContextoAnterior(mensajeLower, contexto);
        }
        return "ü§î No te entend√≠ bien. ¬øPod√©s decirlo de otra forma? Pod√©s preguntarme por obras sociales, precios, marcas, horarios, lentes de contacto, l√≠quidos o turnos.";
    }
  }

  continuarFlujoConversacional(mensaje, contexto, intent) {
    switch (contexto.esperandoRespuesta) {
      case 'primera_vez_contacto':
        contexto.esperandoRespuesta = null;
        if (intent === 'primera_vez_confirmada' || mensaje.includes('primera') || mensaje.includes('nunca') || mensaje === 'primera vez') {
          return "üéØ Para empezar, recomendamos una consulta con nuestro contact√≥logo. En esa cita te ense√±an a ponerlos, quitarlos y cuidarlos. ¬øQuer√©s que te reserve un turno?";
        } else if (intent === 'experiencia_confirmada' || mensaje.includes('uso') || mensaje.includes('ya uso')) {
          return "üîÑ Perfecto. ¬øQuer√©s reponer la misma marca que ya us√°s o te interesa ver otras opciones? Trabajamos con Acuvue, Biofinity y Air Optix.";
        } else {
          contexto.esperandoRespuesta = 'primera_vez_contacto';
          return "üëÅÔ∏è No entend√≠ bien. ¬øEs tu primera vez usando lentes de contacto o ya ten√©s experiencia?";
        }

      case 'confirmar_mapa':
        contexto.esperandoRespuesta = null;
        if (intent === 'mapa_confirmado' || mensaje.includes('si') || mensaje.includes('s√≠')) {
          return `üó∫Ô∏è Te comparto la ubicaci√≥n exacta: Serrano 684, Villa Crespo

üìç Google Maps: https://maps.google.com/?q=Serrano+684,+Villa+Crespo,+CABA

Estamos a 4 cuadras del subte √Ångel Gallardo (l√≠nea B).`;
        } else {
          return "‚úÖ Perfecto. Cualquier cosa, acordate: Serrano 684, Villa Crespo. ¬øNecesit√°s saber algo m√°s?";
        }

      case 'tipo_consulta_os':
        contexto.esperandoRespuesta = null;
        if (intent === 'os_armazones' || mensaje.includes('armazon') || mensaje.includes('cristal')) {
          contexto.subtema = 'armazones';
          return "üìÑ En el caso de armazones o cristales, la receta m√©dica es obligatoria. Tiene que estar vigente (dura 60 d√≠as) y detallar bien qu√© tipo de lentes necesit√°s: lejos, cerca o multifocales.";
        } else if (intent === 'os_contacto' || mensaje.includes('contacto')) {
          contexto.subtema = 'lentes_contacto_os';
          return "üëÅÔ∏è Con lentes de contacto, la obra social siempre exige receta vigente y detallada. ¬øTen√©s una receta actualizada?";
        } else {
          contexto.esperandoRespuesta = 'tipo_consulta_os';
          return "üè• ¬øTu consulta de obra social es para armazones/cristales o para lentes de contacto?";
        }

      case 'tipo_producto_precio':
        contexto.esperandoRespuesta = null;
        if (intent === 'precio_armazones' || mensaje.includes('armazon') || mensaje.includes('marco')) {
          contexto.subtema = 'armazones_precio';
          return "üëì Los armazones se eligen siempre en persona üëì, porque necesitamos hacerte mediciones para que queden bien en tu rostro. Tenemos modelos desde $55.000 hasta $270.000. ¬øQuer√©s que te pase direcci√≥n y horarios para venir a verlos?";
        } else if (intent === 'precio_cristales' || mensaje.includes('cristal')) {
          contexto.subtema = 'cristales_precio';
          return "üîç El precio de los cristales depende de tu receta y del tipo de tratamiento que elijas (simples, antirreflejo, fotocrom√°ticos, progresivos). ¬øQuer√©s contarme qu√© tipo de receta ten√©s para orientarte mejor?";
        } else if (intent === 'precio_contacto' || mensaje.includes('contacto')) {
          contexto.subtema = 'contacto_precio';
          return "üëÅÔ∏è Los precios var√≠an seg√∫n la marca y el tipo: trabajamos con Acuvue, Biofinity y Air Optix en versiones diarias y mensuales. ¬øQuer√©s que te muestre las diferencias entre ellas?";
        } else {
          contexto.esperandoRespuesta = 'tipo_producto_precio';
          return "üí≤ ¬øQuer√©s saber precios de armazones, cristales o lentes de contacto?";
        }

      default:
        return null;
    }
  }

  continuarDeContextoAnterior(mensaje, contexto) {
    // Intentar continuar la conversaci√≥n basado en el √∫ltimo tema
    switch (contexto.ultimoTema) {
      case 'lentes_contacto':
        contexto.esperandoRespuesta = 'primera_vez_contacto';
        return "üëÅÔ∏è Volviendo a tu consulta sobre lentes de contacto... ¬øEs tu primera vez o ya los us√°s?";
      
      case 'obra_social':
        contexto.esperandoRespuesta = 'tipo_consulta_os';
        return "üè• Dec√≠as sobre obras sociales... ¬øera para armazones/cristales o lentes de contacto?";
      
      case 'precio':
        contexto.esperandoRespuesta = 'tipo_producto_precio';
        return "üí≤ ¬øQuer√≠as saber precios de armazones, cristales o lentes de contacto?";
      
      case 'direccion':
        contexto.esperandoRespuesta = 'confirmar_mapa';
        return "üìç ¬øQuer√©s que te comparta el mapa de Google con nuestra ubicaci√≥n?";
      
      default:
        return "ü§î Perd√≥n, no entend√≠. ¬øPod√©s reformular tu pregunta?";
    }
  }

  // üè• √ÅRBOL DE OBRAS SOCIALES COMPLETO (manteniendo tu l√≥gica original)
  manejarObraSocial(mensaje, contexto) {
    if (mensaje.includes('armazon') || mensaje.includes('cristal') || mensaje.includes('anteojo') || (mensaje.includes('lente') && !mensaje.includes('contacto'))) {
      contexto.subtema = 'armazones';
      contexto.paso = 2;
      return "üìÑ En el caso de armazones o cristales, la receta m√©dica es obligatoria. Tiene que estar vigente (dura 60 d√≠as) y detallar bien qu√© tipo de lentes necesit√°s: lejos, cerca o multifocales.";
    }
    
    if (mensaje.includes('contacto') || mensaje.includes('lentilla')) {
      contexto.subtema = 'lentes_contacto_os';
      contexto.paso = 2;
      return "üëÅÔ∏è Con lentes de contacto, la obra social siempre exige receta vigente y detallada. ¬øTen√©s una receta actualizada?";
    }
    
    // ... (mantener toda tu l√≥gica original de obras sociales)
    return "üè• ¬øQuer√©s que te pase la direcci√≥n y horarios para que vengas a iniciar el tr√°mite?";
  }

  // üí≤ √ÅRBOL DE PRECIOS COMPLETO (manteniendo tu l√≥gica original)
  manejarPrecios(mensaje, contexto) {
    if (mensaje.includes('armazon') || mensaje.includes('marco') || mensaje.includes('montura')) {
      contexto.subtema = 'armazones_precio';
      return "üëì Los armazones se eligen siempre en persona üëì, porque necesitamos hacerte mediciones para que queden bien en tu rostro. Tenemos modelos desde $55.000 hasta $270.000. ¬øQuer√©s que te pase direcci√≥n y horarios para venir a verlos?";
    }
    
    // ... (mantener toda tu l√≥gica original de precios)
    return "üí≤ " + this.agregarPromociones();
  }

  agregarPromociones() {
    return "Tenemos 3 cuotas sin inter√©s a partir de $100.000 y 6 cuotas sin inter√©s a partir de $200.000 üí≥. Adem√°s, hay un 10% de descuento pagando en efectivo (completo en efectivo). Aceptamos efectivo, QR y todas las tarjetas.";
  }

  // üìÖ SISTEMA DE TURNOS COMPLETO
  manejarTurnos(mensaje, contexto) {
    if (mensaje.includes('turno') || mensaje.includes('cita') || mensaje.includes('reserva')) {
      contexto.subtema = 'turnos';
      return "üìÖ Perfecto, ¬øpara qu√© d√≠a te gustar√≠a reservar? Atendemos de lunes a s√°bado de 10:30 a 19:30.";
    }
    
    if (contexto.subtema === 'turnos') {
      const dias = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado'];
      const diaEncontrado = dias.find(dia => mensaje.includes(dia));
      
      if (diaEncontrado) {
        return `‚úÖ Turno reservado para el ${diaEncontrado}. Te esperamos en Serrano 684, Villa Crespo. ¬øNecesit√°s que te confirme la hora o alg√∫n dato m√°s?`;
      }
    }
    
    return "üìÖ ¬øQuer√©s que te reserve un turno? Decime qu√© d√≠a te viene bien.";
  }

  // üì¶ CONSULTA DE STOCK INTELIGENTE
  manejarStock(mensaje, contexto) {
    if (mensaje.includes('stock') || mensaje.includes('disponible') || mensaje.includes('queda')) {
      contexto.subtema = 'stock';
      return "üì¶ Para confirmar stock exacto necesito que me digas qu√© producto espec√≠fico busc√°s. ¬øEs para armazones, lentes de contacto o l√≠quidos?";
    }
    
    if (contexto.subtema === 'stock') {
      if (mensaje.includes('armazon') || mensaje.includes('marco')) {
        return "üëì Para confirmar stock de armazones necesit√°s venir a la √≥ptica, ya que cada modelo tiene medidas espec√≠ficas. ¬øQuer√©s que te pase direcci√≥n?";
      }
      
      if (mensaje.includes('contacto') || mensaje.includes('lentilla')) {
        return "üëÅÔ∏è ¬øQu√© marca de lentes de contacto busc√°s? Trabajamos con Acuvue, Biofinity y Air Optix.";
      }
    }
    
    return "üì¶ ¬øQuer√©s confirmar disponibilidad de alg√∫n producto en particular?";
  }

  manejarRespuestaSimple(mensaje, contexto) {
    // RESPUESTAS POSITIVAS
    if (mensaje === 'si' || mensaje === 's√≠' || mensaje === 'si.' || mensaje === 's√≠.' || 
        mensaje === 'claro' || mensaje === 'por supuesto' || mensaje === 'dale') {
      
      switch (contexto.ultimoTema) {
        case 'lentes_contacto':
          contexto.esperandoRespuesta = 'primera_vez_contacto';
          return "üëÅÔ∏è ¬°Perfecto! ¬øEs tu primera vez usando lentes de contacto o ya ten√©s experiencia?";
        case 'obra_social':
          contexto.esperandoRespuesta = 'tipo_consulta_os';
          return "üè• Genial. ¬øTu consulta es para armazones/cristales o para lentes de contacto?";
        case 'liquidos':
          return "üß¥ ¬øQu√© marca de l√≠quido us√°s o te recomiendo alguna?";
        case 'direccion':
          contexto.esperandoRespuesta = 'confirmar_mapa';
          return "üìç ¬øQuer√©s que te comparta un mapa de Google para que llegues m√°s f√°cil?";
        case 'turnos':
          return "üìÖ ¬øPara qu√© d√≠a te gustar√≠a reservar el turno?";
        case 'stock':
          return "üì¶ ¬øDe qu√© producto quer√©s confirmar disponibilidad?";
        default:
          return "¬øEn qu√© m√°s te puedo ayudar?";
      }
    }
    
    // RESPUESTAS NEGATIVAS
    if (mensaje === 'no' || mensaje === 'no.' || mensaje === 'nop') {
      switch (contexto.ultimoTema) {
        case 'lentes_contacto':
          return "¬°No hay problema! Te recomiendo una consulta para ver qu√© te conviene. ¬øTe interesa?";
        case 'direccion':
          return "‚úÖ Perfecto. Cualquier cosa, acordate: Serrano 684, Villa Crespo. ¬øNecesit√°s saber algo m√°s?";
        case 'turnos':
          return "¬øTe ayudo con algo m√°s entonces?";
        case 'stock':
          return "¬øNecesit√°s ayuda con otra cosa?";
        default:
          return "¬øTe ayudo con algo m√°s?";
      }
    }

    // DETECCI√ìN DE "PRIMERA VEZ" EN LENTES DE CONTACTO
    if ((mensaje.includes('primera') || mensaje.includes('nunca')) && contexto.ultimoTema === 'lentes_contacto') {
      contexto.esperandoRespuesta = null;
      return "üéØ Para empezar, recomendamos una consulta con nuestro contact√≥logo. En esa cita te ense√±an a ponerlos, quitarlos y cuidarlos. ¬øQuer√©s que te reserve un turno?";
    }

    // DETECCI√ìN DE "YA USO" EN LENTES DE CONTACTO
    if ((mensaje.includes('uso') || mensaje.includes('ya uso') || mensaje.includes('experiencia')) && contexto.ultimoTema === 'lentes_contacto') {
      contexto.esperandoRespuesta = null
    
