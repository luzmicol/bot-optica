const express = require('express');
const twilio = require('twilio');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ==================== CONFIGURACI√ìN INICIAL ====================
const personalidad = {
  nombre: "Luna",
  emojis: ["üëã", "üëì", "üîç", "üí°", "üìç", "‚è≥", "üíé", "üîä", "üåü", "üìå", "üè•", "üìã", "üëÅÔ∏è", "‚è∞", "üß¥"],
  velocidadRespuesta: { min: 800, max: 2500 }
};

// Obras sociales que aceptan
const obrasSociales = [
  "Swiss Medical",
  "Medicus",
  "Construir Salud",
  "Osetya"
];

// Horarios de atenci√≥n
const horariosAtencion = {
  regular: "Lunes a S√°bados: 10:30 - 19:30",
  adaptacionLC: "Lunes a S√°bados: hasta las 18:30 (por la duraci√≥n del procedimiento)"
};

// Sistema de memoria adaptable
let memoriaUsuarios = new Map();
let redisClient = null;

// Intentar conectar a Redis si existe la URL
(async () => {
  if (process.env.REDIS_URL) {
    try {
      const redis = require('redis');
      redisClient = redis.createClient({
        url: process.env.REDIS_URL,
        socket: {
          connectTimeout: 10000,
          timeout: 10000
        }
      });
      
      redisClient.on('error', (err) => {
        console.log('Redis usando memoria vol√°til:', err.message);
        redisClient = null;
      });
      
      await redisClient.connect();
      console.log('‚úÖ Conectado a Redis Cloud');
    } catch (error) {
      console.log('‚ùå Redis no disponible, usando memoria vol√°til');
      redisClient = null;
    }
  } else {
    console.log('‚ÑπÔ∏è  REDIS_URL no configurada, usando memoria vol√°til');
  }
})();

// ==================== FUNCIONES DE MEMORIA ====================
async function obtenerContextoUsuario(senderId) {
  try {
    if (redisClient) {
      const contexto = await redisClient.get(`contexto:${senderId}`);
      return contexto ? JSON.parse(contexto) : { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    } else {
      return memoriaUsuarios.get(senderId) || { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    }
  } catch (error) {
    console.error('Error obteniendo contexto:', error);
    return { paso: 0, datos: {}, ultimaInteraccion: Date.now(), historial: [] };
  }
}

async function guardarContextoUsuario(senderId, contexto) {
  try {
    contexto.ultimaInteraccion = Date.now();
    
    if (redisClient) {
      await redisClient.setex(`contexto:${senderId}`, 3600, JSON.stringify(contexto));
    } else {
      memoriaUsuarios.set(senderId, contexto);
    }
  } catch (error) {
    console.error('Error guardando contexto:', error);
  }
}

// ==================== FUNCI√ìN PARA OBTENER PRODUCTOS ====================
async function obtenerProductosDeSheet(sheetTitle) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[sheetTitle];
    if (!sheet) {
      console.error(`No se encontr√≥ la hoja: '${sheetTitle}'`);
      return [];
    }
    
    await sheet.loadHeaderRow(3);
    const rows = await sheet.getRows();
    
    const productos = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      const codigo = row['COD. HYPNO'] || row['C√≥digo'] || '';
      const marca = row['Marca'] || '';
      const solReceta = row['Sol/Receta'] || '';
      const modelo = row['Modelo'] || '';
      const color = row['Color'] || '';
      const cantidad = row['Cantidad'] || '0';
      const precio = row['PRECIO'] || '';
      const descripcion = row['Descripciones'] || '';
      
      if (marca.trim() !== '' || modelo.trim() !== '') {
        productos.push({
          codigo: codigo.trim(),
          marca: marca.trim(),
          sol_receta: solReceta.trim(),
          modelo: modelo.trim(),
          color: color.trim(),
          cantidad: cantidad.trim(),
          precio: precio.trim(),
          descripcion: descripcion.trim(),
          categoria: sheetTitle
        });
      }
    }
    
    console.log(`‚úÖ Obtenidos ${productos.length} productos de ${sheetTitle}`);
    return productos;
  } catch (error) {
    console.error(`Error obteniendo productos de ${sheetTitle}:`, error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER MARCAS DE LENTES DE CONTACTO ====================
async function obtenerMarcasLC() {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[process.env.SHEETS_LC];
    if (!sheet) {
      console.error('No se encontr√≥ la hoja de Lentes de Contacto');
      return ['Acuvue', 'Air Optix', 'Biofinity', 'FreshLook'];
    }
    
    await sheet.loadHeaderRow(2);
    const rows = await sheet.getRows();
    
    const marcas = new Set();
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const marca = row['B'] || ''; // Columna B para marcas de LC
      if (marca.trim() !== '') {
        marcas.add(marca.trim());
      }
    }
    
    const marcasArray = Array.from(marcas).sort();
    console.log(`üëÅÔ∏è Marcas de LC detectadas: ${marcasArray.join(', ')}`);
    return marcasArray;
  } catch (error) {
    console.error('Error obteniendo marcas de LC:', error);
    return ['Acuvue', 'Air Optix', 'Biofinity', 'FreshLook'];
  }
}

// ==================== FUNCI√ìN PARA OBTENER L√çQUIDOS ====================
async function obtenerLiquidos() {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[process.env.SHEETS_LIQUIDOS];
    if (!sheet) {
      console.error('No se encontr√≥ la hoja de L√≠quidos');
      return [{marca: 'Renu', tamano: '300ml'}, {marca: 'Opti-Free', tamano: '300ml'}];
    }
    
    await sheet.loadHeaderRow(2);
    const rows = await sheet.getRows();
    
    const liquidos = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const marca = row['B'] || ''; // Columna B para marcas
      const tamano = row['C'] || ''; // Columna C para tama√±o
      
      if (marca.trim() !== '') {
        liquidos.push({
          marca: marca.trim(),
          tamano: tamano.trim() || 'Consultar'
        });
      }
    }
    
    console.log(`üß¥ L√≠quidos detectados: ${liquidos.length} productos`);
    return liquidos;
  } catch (error) {
    console.error('Error obteniendo l√≠quidos:', error);
    return [{marca: 'Renu', tamano: '300ml'}, {marca: 'Opti-Free', tamano: '300ml'}];
  }
}

// ==================== FUNCI√ìN PARA OBTENER TODOS LOS PRODUCTOS ====================
async function obtenerTodosProductos() {
  try {
    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    let todosProductos = [];
    
    for (const sheet of sheets) {
      const productos = await obtenerProductosDeSheet(sheet);
      todosProductos = todosProductos.concat(productos);
    }
    
    console.log(`üìä Total de productos en stock: ${todosProductos.length}`);
    return todosProductos;
  } catch (error) {
    console.error('Error obteniendo todos los productos:', error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER MARCAS REALES ====================
async function obtenerMarcasReales() {
  try {
    const productos = await obtenerTodosProductos();
    const marcas = new Set();
    
    productos.forEach(producto => {
      if (producto.marca && producto.marca.trim() !== '') {
        marcas.add(producto.marca.trim());
      }
    });
    
    const marcasArray = Array.from(marcas).sort();
    console.log(`üè∑Ô∏è Marcas detectadas: ${marcasArray.join(', ')}`);
    return marcasArray;
  } catch (error) {
    console.error('Error obteniendo marcas, usando marcas por defecto:', error);
    return ['Ray-Ban', 'Oakley', 'Vulk', 'Carter', 'Sarkany', 'Acuvue', 'Rusty'];
  }
}

// ==================== FUNCI√ìN OPENAI (GPT-4o-mini) ====================
async function consultarIA(prompt) {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  if (!OPENAI_API_KEY) {
    console.error("OpenAI API Key no configurada");
    return "";
  }
  
  const url = 'https://api.openai.com/v1/chat/completions';

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{
          role: 'user', 
          content: prompt
        }],
        max_tokens: 150,
        temperature: 0.3
      })
    });

    const data = await response.json();
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
      return data.choices[0].message.content;
    } else {
      return "";
    }
    
  } catch (error) {
    console.error("Error calling OpenAI:", error);
    return "";
  }
}

// ==================== FUNCI√ìN BUSCAR EN SHEETS ====================
async function searchInSheet(code) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    for (const sheetTitle of sheets) {
      const sheet = doc.sheetsByTitle[sheetTitle];
      if (!sheet) continue;

      await sheet.loadHeaderRow(3);
      const rows = await sheet.getRows();
      
      const foundRow = rows.find(row => {
        const rowCode = row['COD. HYPNO'] || row['C√≥digo'];
        return rowCode && rowCode.toLowerCase().trim() === code.toLowerCase().trim();
      });
      
      if (foundRow) {
        return {
          categoria: sheetTitle,
          codigo: foundRow['COD. HYPNO'] || '',
          marca: foundRow['Marca'] || '',
          sol_receta: foundRow['Sol/Receta'] || '',
          modelo: foundRow['Modelo'] || '',
          color: foundRow['Color'] || '',
          cantidad: foundRow['Cantidad'] || '0',
          precio: foundRow['PRECIO'] || '',
          descripcion: foundRow['Descripciones'] || ''
        };
      }
    }
    
    console.log(`‚ùå C√≥digo no encontrado: ${code}`);
    return null;
  } catch (error) {
    console.error('Error buscando en Sheet:', error);
    return null;
  }
}

// ==================== B√öSQUEDA INTELIGENTE POR DESCRIPCI√ìN ====================
async function buscarPorDescripcion(descripcion) {
  try {
    const todosProductos = await obtenerTodosProductos();
    
    const productosConStock = todosProductos.filter(p => {
      const stock = parseInt(p.cantidad) || 0;
      return stock > 0;
    });
    
    if (productosConStock.length === 0) {
      console.log('‚ö†Ô∏è No hay productos con stock, usando ejemplos');
      return [
        { codigo: "AC-274", marca: "Ray-Ban", modelo: "Aviador", color: "Oro", precio: "15000", descripcion: "Estilo aviador metal", categoria: "Armazones" },
        { codigo: "VK-123", marca: "Vulk", modelo: "Wayfarer", color: "Negro", precio: "12000", descripcion: "Acetato cl√°sico", categoria: "Armazones" },
        { codigo: "SK-456", marca: "Sarkany", modelo: "Redondo", color: "Plateado", precio: "18000", descripcion: "Metal redondo vintage", categoria: "Armazones" }
      ];
    }
    
    const prompt = `Cliente busca: "${descripcion}".

Productos disponibles en stock (formato: CODIGO|MARCA|MODELO|COLOR|PRECIO|CATEGORIA|DESCRIPCION):
${productosConStock.map(p => 
  `${p.codigo}|${p.marca}|${p.modelo}|${p.color}|${p.precio}|${p.categoria}|${p.descripcion}`
).join('\n')}

INSTRUCCIONES CR√çTICAS:
1. Busc√° productos que coincidan con la descripci√≥n del cliente
2. Consider√° la DESCRIPCI√ìN de cada producto
3. Si no hay coincidencia exacta, busc√° ALGO SIMILAR
4. Respond√© SOLO con los c√≥digos separados por coma

Ejemplo: "AC-123, XY-456, ZZ-789"`;

    const respuestaIA = await consultarIA(prompt);
    
    const codigos = respuestaIA.split(',').map(cod => cod.trim()).filter(cod => cod !== '');
    
    const productosEncontrados = [];
    for (const codigo of codigos.slice(0, 3)) {
      const producto = productosConStock.find(p => p.codigo && p.codigo.toLowerCase() === codigo.toLowerCase());
      if (producto) productosEncontrados.push(producto);
    }
    
    console.log(`üîç B√∫squeda: "${descripcion}" -> Encontrados: ${productosEncontrados.length} productos`);
    return productosEncontrados.length > 0 ? productosEncontrados : productosConStock.slice(0, 3);
    
  } catch (error) {
    console.error('Error en b√∫squeda inteligente, usando ejemplos:', error);
    return [
      { codigo: "AC-274", marca: "Ray-Ban", modelo: "Aviador", color: "Oro", precio: "15000", descripcion: "Estilo aviador metal", categoria: "Armazones" },
      { codigo: "VK-123", marca: "Vulk", modelo: "Wayfarer", color: "Negro", precio: "12000", descripcion: "Acetato cl√°sico", categoria: "Armazones" },
      { codigo: "SK-456", marca: "Sarkany", modelo: "Redondo", color: "Plateado", precio: "18000", descripcion: "Metal redondo vintage", categoria: "Armazones" }
    ];
  }
}

// ==================== SISTEMA DE FALLBACK ====================
const respuestasFallback = [
  "No estoy segura de entenderte completamente. ¬øPodr√≠as reformular tu pregunta?",
  "Quiero asegurarme de ayudarte bien. ¬øTe refieres a informaci√≥n sobre stock, precios o agendar una cita?",
  "Perdon√°, no capt√© eso. ¬øPodr√≠as decirlo de otra forma?",
  "Voy a derivarte con un especialista que te puede ayudar mejor con eso.",
  "¬øPodr√≠as contarme m√°s espec√≠ficamente qu√© necesitas? As√≠ puedo ayudarte mejor."
];

function obtenerFallbackAleatorio() {
  return respuestasFallback[Math.floor(Math.random() * respuestasFallback.length)];
}

// ==================== DETECTAR OBRA SOCIAL EN MENSAJE ====================
function detectarObraSocial(mensaje) {
  const msg = mensaje.toLowerCase();
  const obrasDetectadas = obrasSociales.filter(obra => 
    msg.includes(obra.toLowerCase())
  );
  
  return obrasDetectadas.length > 0 ? obrasDetectadas[0] : null;
}

// ==================== DETECTAR MARCA EN MENSAJE ====================
async function detectarMarca(mensaje) {
  try {
    const marcasReales = await obtenerMarcasReales();
    const msg = mensaje.toLowerCase();
    
    const marcaDetectada = marcasReales.find(marca => 
      msg.includes(marca.toLowerCase())
    );
    
    return marcaDetectada || null;
  } catch (error) {
    console.error('Error detectando marca:', error);
    return null;
  }
}

// ==================== PROCESAMIENTO PRINCIPAL DE MENSAJES ====================
async function procesarMensaje(mensaje, contexto, senderId) {
  const messageLower = mensaje.toLowerCase();
  let respuesta = '';

  // Saludo inicial
  if (messageLower.includes('hola') || messageLower === 'hi' || messageLower === 'üëã') {
    contexto.paso = 0;
    const emoji = personalidad.emojis[Math.floor(Math.random() * personalidad.emojis.length)];
    respuesta = `${emoji} ¬°Hola! Soy ${personalidad.nombre}, tu asistente de *Hypnottica*. ¬øEn qu√© puedo ayudarte hoy?\n\n‚Ä¢ Consultar stock\n‚Ä¢ Precios\n‚Ä¢ Agendar cita\n‚Ä¢ Obras sociales\n‚Ä¢ Ubicaci√≥n y horarios`;

  // Buscar stock por c√≥digo
  } else if (messageLower.startsWith('#stock ') || messageLower.startsWith('stock ')) {
    let code = messageLower.startsWith('#stock ') ? mensaje.split(' ')[1] : mensaje.split(' ')[1];
    
    if (!code) {
      respuesta = "‚ùå Contame el c√≥digo del modelo que te interesa, por ejemplo: \"AC-274\"";
    } else {
      const product = await searchInSheet(code);
      
      if (product) {
        const descripcion = product.descripcion ? `\nüìù *Descripci√≥n:* ${product.descripcion}` : '';
        const solReceta = product.sol_receta ? `\nüëÅÔ∏è  *Tipo:* ${product.sol_receta}` : '';
        
        respuesta = `
üè∑Ô∏è  *C√≥digo:* ${product.codigo || 'N/A'}
üì¶  *Categor√≠a:* ${product.categoria}
üëì  *Marca:* ${product.marca || ''}
üîÑ  *Modelo:* ${product.modelo || ''}
üé®  *Color:* ${product.color || 'N/A'}${solReceta}${descripcion}
üìä  *Stock:* ${product.cantidad || '0'} unidades
üí≤  *Precio:* $${product.precio || 'N/A'}
        `;
      } else {
        respuesta = "‚ùå *Producto no encontrado.* Verific√° el c√≥digo o describime lo que busc√°s.";
      }
    }

  // B√∫squeda por descripci√≥n
  } else if (messageLower.includes('busco') || messageLower.includes('quiero') || messageLower.includes('tene') ||
             messageLower.includes('redondo') || messageLower.includes('cuadrado') || messageLower.includes('ovalado') ||
             messageLower.includes('aviador') || messageLower.includes('wayfarer') || messageLower.includes('rectangular') ||
             messageLower.includes('metal') || messageLower.includes('acetato') || messageLower.includes('chico') ||
             messageLower.includes('grande') || messageLower.includes('mediano') || messageLower.includes('estilo') ||
             messageLower.includes('lente de contacto') || messageLower.includes('lentilla') || messageLower.includes('contacto')) {
    
    respuesta = "üîç *Buscando en nuestro stock...* Un momento por favor.";
    const productosEncontrados = await buscarPorDescripcion(mensaje);
    
    if (productosEncontrados.length > 0) {
      respuesta = `üîç *Encontr√© estas opciones para vos:*\n\n`;
      
      productosEncontrados.forEach((producto, index) => {
        const desc = producto.descripcion ? ` - ${producto.descripcion}` : '';
        respuesta += `${index + 1}. *${producto.codigo}* - ${producto.marca} ${producto.modelo}${desc} - $${producto.precio}\n`;
      });
      
      respuesta += `\n*Escrib√≠ #stock [c√≥digo] para m√°s detalles de cada uno.*`;
    } else {
      respuesta = "‚ùå *No encontr√© productos que coincidan.*\n\nProb√° ser m√°s espec√≠fico o contact√° a un asesor al *11 1234-5678*.";
    }

  // Obras sociales - INFORMACI√ìN COMPLETA ACTUALIZADA
  } else if (messageLower.includes('obra social') || messageLower.includes('prepaga') || 
             messageLower.includes('swiss') || messageLower.includes('medicus') ||
             messageLower.includes('construir') || messageLower.includes('osetya') ||
             messageLower.includes('cobertura') || messageLower.includes('beneficio') ||
             messageLower.includes('receta') || messageLower.includes('oftalmologo') ||
             messageLower.includes('medico') || messageLower.includes('cobertura')) {
    
    const obraDetectada = detectarObraSocial(mensaje);
    
    if (obraDetectada) {
      respuesta = `üè• *Trabajamos con ${obraDetectada}* ‚úÖ\n\nüìã *¬°Importante! Para usar tu obra social necesit√°s:*\n\n` +
                 `üëÅÔ∏è  *Receta m√©dica OBLIGATORIA* con:\n` +
                 `‚Ä¢ Nombre completo y matr√≠cula del oftalm√≥logo\n` +
                 `‚Ä¢ Tus datos personales (nombre, DNI)\n` +
                 `‚Ä¢ Datos de la obra social y n√∫mero de afiliado\n` +
                 `‚Ä¢ Diagn√≥stico claro y detallado\n\n` +
                 `üí° *Record√° que:*\n` +
                 `‚Ä¢ La receta tiene *validez de 60 d√≠as h√°biles*\n` +
                 `‚Ä¢ La obra social *solo cubre lo que indica la receta*\n` +
                 `‚Ä¢ Si dice "lente de lejos", no cubre lentes de cerca\n` +
                 `‚Ä¢ *No cubren lentes de contacto* con receta de armazones\n\n` +
                 `¬øTen√©s la receta? ¬°Acercate y te ayudamos con todo! üìû *11 1234-5678*`;
    } else {
      respuesta = `üè• *Obras Sociales que aceptamos:*\n\n${obrasSociales.map(os => `‚Ä¢ ${os}`).join('\n')}\n\n` +
                 `üìã *Requisitos importantes:*\n\n` +
                 `üëÅÔ∏è  *Necesit√°s receta m√©dica actualizada* (m√°ximo 60 d√≠as)\n` +
                 `‚Ä¢ Debe ser de un oftalm√≥logo matriculado\n` +
                 `‚Ä¢ Con todos tus datos y los de la obra social\n` +
                 `‚Ä¢ Indicando exactamente lo que necesit√°s\n\n` +
                 `üí° *La obra social solo cubre lo espec√≠ficamente recetado.*\n\n` +
                 `¬øTen√©s alguna de estas obras sociales? üéØ`;
    }

  // Informaci√≥n espec√≠fica sobre recetas
  } else if (messageLower.includes('receta') || messageLower.includes('validez') || 
             messageLower.includes('60 dias') || messageLower.includes('oftalmologo')) {
    
    respuesta = `üìã *Informaci√≥n sobre recetas m√©dicas:*\n\n` +
               `üëÅÔ∏è  *¬øQu√© necesita tu receta?*\n` +
               `‚Ä¢ Nombre y matr√≠cula del oftalm√≥logo\n` +
               `‚Ä¢ Tus datos completos (nombre, DNI, fecha)\n` +
               `‚Ä¢ Diagn√≥stico detallado y espec√≠fico\n` +
               `‚Ä¢ Datos de tu obra social\n\n` +
               `‚è≥ *Validez:* 60 d√≠as h√°biles desde la emisi√≥n\n\n` +
               `üéØ *Importante:*\n` +
               `‚Ä¢ La obra social *solo cubre exactamente lo recetado*\n` +
               `‚Ä¢ Si dice "lente de lejos", no cubre lentes de cerca\n` +
               `‚Ä¢ Receta de armazones ‚â† cobertura para lentes de contacto\n\n` +
               `¬øNecesit√°s m√°s informaci√≥n? üìû *11 1234-5678*`;

  // Lentes de contacto y marcas espec√≠ficas
  } else if (messageLower.includes('lente de contacto') || messageLower.includes('lentilla') || 
             messageLower.includes('contacto') || messageLower.includes('lc')) {
    
    try {
      const marcasLC = await obtenerMarcasLC();
      respuesta = `üëÅÔ∏è  *Lentes de Contacto que trabajamos:*\n\n${marcasLC.map(m => `‚Ä¢ ${m}`).join('\n')}\n\n` +
                 `üí° *Servicios disponibles:*\n` +
                 `‚Ä¢ Adaptaci√≥n para primeros usuarios\n` +
                 `‚Ä¢ Ense√±anza de colocaci√≥n y cuidado\n` +
                 `‚Ä¢ Control de refracci√≥n para verificar recetas\n\n` +
                 `‚è∞ *Agend√° tu cita de adaptaci√≥n hasta 1 hora antes del cierre*`;
    } catch (error) {
      respuesta = `üëÅÔ∏è  *Trabajamos con las mejores marcas de lentes de contacto:*\n\n‚Ä¢ Acuvue\n‚Ä¢ Air Optix\n‚Ä¢ Biofinity\n‚Ä¢ FreshLook\n\n` +
                 `üí° *Ofrecemos adaptaci√≥n para primeros usuarios y controles de refracci√≥n.*\n\n` +
                 `‚è∞ *Agend√° tu cita hasta 1 hora antes del cierre*`;
    }

  // L√≠quidos para lentes de contacto
  } else if (messageLower.includes('liquido') || messageLower.includes('solucion') || 
             messageLower.includes('limpieza') || messageLower.includes('liquidos')) {
    
    try {
      const liquidos = await obtenerLiquidos();
      respuesta = `üß¥ *L√≠quidos para lentes de contacto:*\n\n`;
      
      liquidos.forEach(liquido => {
        respuesta += `‚Ä¢ ${liquido.marca} - ${liquido.tamano}\n`;
      });
      
      respuesta += `\nüíß *Tenemos soluciones de limpieza y mantenimiento*`;
    } catch (error) {
      respuesta = `üß¥ *L√≠quidos para lentes de contacto:*\n\n‚Ä¢ Renu - 300ml\n‚Ä¢ Opti-Free - 300ml\n‚Ä¢ AquaSoft - 300ml\n\n` +
                 `üíß *Soluciones de limpieza y mantenimiento disponibles*`;
    }

  // Agendar turno - INFORMACI√ìN ACTUALIZADA
  } else if (messageLower.includes('agendar') || messageLower.includes('turno') || messageLower.includes('cita') ||
             messageLower.includes('adaptacion') || messageLower.includes('control')) {
    
    respuesta = `üìÖ *Servicios para agendar:*\n\n` +
               `üëÅÔ∏è  *Control de refracci√≥n:*\n` +
               `‚Ä¢ Verificaci√≥n de recetas m√©dicas\n` +
               `‚Ä¢ Chequeo de que la graduaci√≥n sea correcta\n\n` +
               `üëÅÔ∏è  *Adaptaci√≥n de lentes de contacto:*\n` +
               `‚Ä¢ Ense√±anza de colocaci√≥n y remoci√≥n\n` +
               `‚Ä¢ Instrucciones de cuidado
