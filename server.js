const express = require('express');
const twilio = require('twilio');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const fetch = require('node-fetch');
const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ==================== CONFIGURACI√ìN INICIAL ====================
const personalidad = {
  nombre: "Luna",
  emojis: ["üëã", "üëì", "üîç", "üí°", "üìç", "‚è≥", "üíé", "üîä", "üåü", "üìå", "üè•", "üìã", "üëÅÔ∏è", "‚è∞", "üß¥"],
  velocidadRespuesta: { min: 800, max: 2500 }
};

// Obras sociales que aceptan
const obrasSociales = [
  "Swiss Medical",
  "Medicus",
  "Construir Salud",
  "Osetya"
];

// Horarios de atenci√≥n
const horariosAtencion = {
  regular: "Lunes a S√°bados: 10:30 - 19:30",
  adaptacionLC: "Lunes a S√°bados: hasta las 18:30 (por la duraci√≥n del procedimiento)"
};

// Sistema de memoria adaptable
let memoriaUsuarios = new Map();
let redisClient = null;

// Intentar conectar a Redis si existe la URL
(async () => {
  if (process.env.REDIS_URL) {
    try {
      const redis = require('redis');
      redisClient = redis.createClient({
        url: process.env.REDIS_URL,
        socket: {
          connectTimeout: 10000,
          timeout: 10000
        }
      });
      
      redisClient.on('error', (err) => {
        console.log('Redis usando memoria vol√°til:', err.message);
        redisClient = null;
      });
      
      await redisClient.connect();
      console.log('‚úÖ Conectado a Redis Cloud');
    } catch (error) {
      console.log('‚ùå Redis no disponible, usando memoria vol√°til');
      redisClient = null;
    }
  } else {
    console.log('‚ÑπÔ∏è  REDIS_URL no configurada, usando memoria vol√°til');
  }
})();

// ==================== FUNCIONES DE MEMORIA ====================
async function obtenerContextoUsuario(senderId) {
  try {
    if (redisClient) {
      const contexto = await redisClient.get(`contexto:${senderId}`);
      return contexto ? JSON.parse(contexto) : { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    } else {
      return memoriaUsuarios.get(senderId) || { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    }
  } catch (error) {
    console.error('Error obteniendo contexto:', error);
    return { paso: 0, datos: {}, ultimaInteraccion: Date.now(), historial: [] };
  }
}

async function guardarContextoUsuario(senderId, contexto) {
  try {
    contexto.ultimaInteraccion = Date.now();
    
    if (redisClient) {
      await redisClient.setex(`contexto:${senderId}`, 3600, JSON.stringify(contexto));
    } else {
      memoriaUsuarios.set(senderId, contexto);
    }
  } catch (error) {
    console.error('Error guardando contexto:', error);
  }
}

// ==================== FUNCI√ìN PARA OBTENER PRODUCTOS ====================
async function obtenerProductosDeSheet(sheetTitle) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[sheetTitle];
    if (!sheet) {
      console.error(`No se encontr√≥ la hoja: '${sheetTitle}'`);
      return [];
    }
    
    await sheet.loadHeaderRow(3);
    const rows = await sheet.getRows();
    
    const productos = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      const codigo = row['COD. HYPNO'] || row['C√≥digo'] || '';
      const marca = row['Marca'] || '';
      const solReceta = row['Sol/Receta'] || '';
      const modelo = row['Modelo'] || '';
      const color = row['Color'] || '';
      const cantidad = row['Cantidad'] || '0';
      const precio = row['PRECIO'] || '';
      const descripcion = row['Descripciones'] || '';
      
      if (marca.trim() !== '' || modelo.trim() !== '') {
        productos.push({
          codigo: codigo.trim(),
          marca: marca.trim(),
          sol_receta: solReceta.trim(),
          modelo: modelo.trim(),
          color: color.trim(),
          cantidad: cantidad.trim(),
          precio: precio.trim(),
          descripcion: descripcion.trim(),
          categoria: sheetTitle
        });
      }
    }
    
    console.log(`‚úÖ Obtenidos ${productos.length} productos de ${sheetTitle}`);
    return productos;
  } catch (error) {
    console.error(`Error obteniendo productos de ${sheetTitle}:`, error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER MARCAS DE LENTES DE CONTACTO ====================
async function obtenerMarcasLC() {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[process.env.SHEETS_LC];
    if (!sheet) {
      console.error('No se encontr√≥ la hoja de Lentes de Contacto');
      return ['Acuvue', 'Air Optix', 'Biofinity', 'FreshLook'];
    }
    
    await sheet.loadHeaderRow(2);
    const rows = await sheet.getRows();
    
    const marcas = new Set();
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const marca = row['B'] || ''; // Columna B para marcas de LC
      if (marca.trim() !== '') {
        marcas.add(marca.trim());
      }
    }
    
    const marcasArray = Array.from(marcas).sort();
    console.log(`üëÅÔ∏è Marcas de LC detectadas: ${marcasArray.join(', ')}`);
    return marcasArray;
  } catch (error) {
    console.error('Error obteniendo marcas de LC:', error);
    return ['Acuvue', 'Air Optix', 'Biofinity', 'FreshLook'];
  }
}

// ==================== FUNCI√ìN PARA OBTENER L√çQUIDOS ====================
async function obtenerLiquidos() {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[process.env.SHEETS_LIQUIDOS];
    if (!sheet) {
      console.error('No se encontr√≥ la hoja de L√≠quidos');
      return [{marca: 'Renu', tamano: '300ml'}, {marca: 'Opti-Free', tamano: '300ml'}];
    }
    
    await sheet.loadHeaderRow(2);
    const rows = await sheet.getRows();
    
    const liquidos = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const marca = row['B'] || ''; // Columna B para marcas
      const tamano = row['C'] || ''; // Columna C para tama√±o
      
      if (marca.trim() !== '') {
        liquidos.push({
          marca: marca.trim(),
          tamano: tamano.trim() || 'Consultar'
        });
      }
    }
    
    console.log(`üß¥ L√≠quidos detectados: ${liquidos.length} productos`);
    return liquidos;
  } catch (error) {
    console.error('Error obteniendo l√≠quidos:', error);
    return [{marca: 'Renu', tamano: '300ml'}, {marca: 'Opti-Free', tamano: '300ml'}];
  }
}

// ==================== FUNCI√ìN PARA OBTENER TODOS LOS PRODUCTOS ====================
async function obtenerTodosProductos() {
  try {
    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    let todosProductos = [];
    
    for (const sheet of sheets) {
      const productos = await obtenerProductosDeSheet(sheet);
      todosProductos = todosProductos.concat(productos);
    }
    
    console.log(`üìä Total de productos en stock: ${todosProductos.length}`);
    return todosProductos;
  } catch (error) {
    console.error('Error obteniendo todos los productos:', error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER PRECIOS REALES ====================
async function obtenerPreciosReales() {
  try {
    const productos = await obtenerTodosProductos();
    const preciosArmazones = productos
      .filter(p => p.categoria.includes('ARMAZON') && p.precio && !isNaN(parseFloat(p.precio)))
      .map(p => parseFloat(p.precio.replace('$', '').replace(',', '')))
      .filter(precio => precio > 0);
    
    if (preciosArmazones.length === 0) {
      return null;
    }
    
    const minPrice = Math.min(...preciosArmazones);
    const maxPrice = Math.max(...preciosArmazones);
    const avgPrice = Math.round(preciosArmazones.reduce((a, b) => a + b, 0) / preciosArmazones.length);
    
    return { min: minPrice, max: maxPrice, avg: avgPrice };
  } catch (error) {
    console.error('Error obteniendo precios reales:', error);
    return null;
  }
}

// ==================== FUNCI√ìN PARA OBTENER MARCAS REALES ====================
async function obtenerMarcasReales() {
  try {
    const productos = await obtenerTodosProductos();
    const marcas = new Set();
    
    productos.forEach(producto => {
      if (producto.marca && producto.marca.trim() !== '' && 
          !producto.marca.toLowerCase().includes('sin marca') &&
          !producto.marca.toLowerCase().includes('varios')) {
        marcas.add(producto.marca.trim());
      }
    });
    
    const marcasArray = Array.from(marcas).sort();
    console.log(`üè∑Ô∏è Marcas detectadas REALES: ${marcasArray.join(', ')}`);
    return marcasArray.length > 0 ? marcasArray : ['Ray-Ban', 'Oakley', 'Vulk', 'Carter', 'Sarkany'];
  } catch (error) {
    console.error('Error obteniendo marcas, usando marcas por defecto:', error);
    return ['Ray-Ban', 'Oakley', 'Vulk', 'Carter', 'Sarkany'];
  }
}

// ==================== FUNCI√ìN OPENAI (GPT-4o-mini) ====================
async function consultarIA(prompt) {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  if (!OPENAI_API_KEY) {
    console.error("OpenAI API Key no configurada");
    return "";
  }
  
  const url = 'https://api.openai.com/v1/chat/completions';

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{
          role: 'user', 
          content: prompt
        }],
        max_tokens: 150,
        temperature: 0.3
      })
    });

    const data = await response.json();
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
      return data.choices[0].message.content;
    } else {
      return "";
    }
    
  } catch (error) {
    console.error("Error calling OpenAI:", error);
    return "";
  }
}

// ==================== FUNCI√ìN BUSCAR EN SHEETS ====================
async function searchInSheet(code) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    
    await doc.useServiceAccountAuth({
      client_email: credentials.client_email,
      private_key: credentials.private_key,
    });
    
    await doc.loadInfo();

    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    for (const sheetTitle of sheets) {
      const sheet = doc.sheetsByTitle[sheetTitle];
      if (!sheet) continue;

      await sheet.loadHeaderRow(3);
      const rows = await sheet.getRows();
      
      const foundRow = rows.find(row => {
        const rowCode = row['COD. HYPNO'] || row['C√≥digo'];
        return rowCode && rowCode.toLowerCase().trim() === code.toLowerCase().trim();
      });
      
      if (foundRow) {
        return {
          categoria: sheetTitle,
          codigo: foundRow['COD. HYPNO'] || '',
          marca: foundRow['Marca'] || '',
          sol_receta: foundRow['Sol/Receta'] || '',
          modelo: foundRow['Modelo'] || '',
          color: foundRow['Color'] || '',
          cantidad: foundRow['Cantidad'] || '0',
          precio: foundRow['PRECIO'] || '',
          descripcion: foundRow['Descripciones'] || ''
        };
      }
    }
    
    console.log(`‚ùå C√≥digo no encontrado: ${code}`);
    return null;
  } catch (error) {
    console.error('Error buscando en Sheet:', error);
    return null;
  }
}

// ==================== B√öSQUEDA INTELIGENTE POR DESCRIPCI√ìN ====================
async function buscarPorDescripcion(descripcion) {
  try {
    const todosProductos = await obtenerTodosProductos();
    
    const productosConStock = todosProductos.filter(p => {
      const stock = parseInt(p.cantidad) || 0;
      return stock > 0;
    });
    
    if (productosConStock.length === 0) {
      console.log('‚ö†Ô∏è No hay productos con stock, usando ejemplos');
      return [
        { codigo: "AC-274", marca: "Ray-Ban", modelo: "Aviador", color: "Oro", precio: "15000", descripcion: "Estilo aviador metal", categoria: "Armazones" },
        { codigo: "VK-123", marca: "Vulk", modelo: "Wayfarer", color: "Negro", precio: "12000", descripcion: "Acetato cl√°sico", categoria: "Armazones" },
        { codigo: "SK-456", marca: "Sarkany", modelo: "Redondo", color: "Plateado", precio: "18000", descripcion: "Metal redondo vintage", categoria: "Armazones" }
      ];
    }
    
    const prompt = `Cliente busca: "${descripcion}".

Productos disponibles en stock (formato: CODIGO|MARCA|MODELO|COLOR|PRECIO|CATEGORIA|DESCRIPCION):
${productosConStock.map(p => 
  `${p.codigo}|${p.marca}|${p.modelo}|${p.color}|${p.precio}|${p.categoria}|${p.descripcion}`
).join('\n')}

INSTRUCCIONES CR√çTICAS:
1. Busc√° productos que coincidan con la descripci√≥n del cliente
2. Consider√° la DESCRIPCI√ìN de cada producto
3. Si no hay coincidencia exacta, busc√° ALGO SIMILAR
4. Respond√© SOLO con los c√≥digos separados por coma

Ejemplo: "AC-123, XY-456, ZZ-789"`;

    const respuestaIA = await consultarIA(prompt);
    
    const codigos = respuestaIA.split(',').map(cod => cod.trim()).filter(cod => cod !== '');
    
    const productosEncontrados = [];
    for (const codigo of codigos.slice(0, 3)) {
      const producto = productosConStock.find(p => p.codigo && p.codigo.toLowerCase() === codigo.toLowerCase());
      if (producto) productosEncontrados.push(producto);
    }
    
    console.log(`üîç B√∫squeda: "${descripcion}" -> Encontrados: ${productosEncontrados.length} productos`);
    return productosEncontrados.length > 0 ? productosEncontrados : productosConStock.slice(0, 3);
    
  } catch (error) {
    console.error('Error en b√∫squeda inteligente, usando ejemplos:', error);
    return [
      { codigo: "AC-274", marca: "Ray-Ban", modelo: "Aviador", color: "Oro", precio: "15000", descripcion: "Estilo aviador metal", categoria: "Armazones" },
      { codigo: "VK-123", marca: "Vulk", modelo: "Wayfarer", color: "Negro", precio: "12000", descripcion: "Acetato cl√°sico", categoria: "Armazones" },
      { codigo: "SK-456", marca: "Sarkany", modelo: "Redondo", color: "Plateado", precio: "18000", descripcion: "Metal redondo vintage", categoria: "Armazones" }
    ];
  }
}

// ==================== SISTEMA DE FALLBACK ====================
const respuestasFallback = [
  "No estoy segura de entenderte completamente. ¬øPodr√≠as reformular tu pregunta?",
  "Quiero asegurarme de ayudarte bien. ¬øTe refieres a informaci√≥n sobre stock, precios o agendar una cita?",
  "Perdon√°, no capt√© eso. ¬øPodr√≠as decirlo de otra forma?",
  "Voy a derivarte con un especialista que te puede ayudar mejor con eso.",
  "¬øPodr√≠as contarme m√°s espec√≠ficamente qu√© necesitas? As√≠ puedo ayudarte mejor."
];

function obtenerFallbackAleatorio() {
  return respuestasFallback[Math.floor(Math.random() * respuestasFallback.length)];
}

// ==================== DETECTAR OBRA SOCIAL EN MENSAJE ====================
function detectarObraSocial(mensaje) {
  const msg = mensaje.toLowerCase();
  const obrasDetectadas = obrasSociales.filter(obra => 
    msg.includes(obra.toLowerCase())
  );
  
  return obrasDetectadas.length > 0 ? obrasDetectadas[0] : null;
}

// ==================== DETECTAR MARCA EN MENSAJE ====================
async function detectarMarca(mensaje) {
  try {
    const marcasReales = await obtenerMarcasReales();
    const msg = mensaje.toLowerCase();
    
    const marcaDetectada = marcasReales.find(marca => 
      msg.includes(marca.toLowerCase())
    );
    
    return marcaDetectada || null;
  } catch (error) {
    console.error('Error detectando marca:', error);
    return null;
  }
}

// ==================== PROCESAMIENTO PRINCIPAL DE MENSAJES ====================
async function procesarMensaje(mensaje, contexto, senderId) {
  const messageLower = mensaje.toLowerCase().trim();
  let respuesta = '';

  console.log(`üîç Procesando: "${mensaje}" -> Contexto paso: ${contexto.paso}`);

  // Saludo inicial - M√ÅS FLEXIBLE
  if (contexto.paso === 0 || 
      messageLower.includes('hola') || 
      messageLower === 'hi' || 
      messageLower === 'üëã' ||
      messageLower.includes('buenas') ||
      messageLower.includes('buenos')) {
    
    contexto.paso = 1;
    const emoji = personalidad.emojis[Math.floor(Math.random() * personalidad.emojis.length)];
    respuesta = `${emoji} ¬°Hola! Soy ${personalidad.nombre}, tu asistente de *Hypnottica*. ¬øEn qu√© puedo ayudarte hoy?\n\n` +
                `‚Ä¢ *Consultar stock* - Dec√≠me "stock" o el c√≥digo del producto\n` +
                `‚Ä¢ *Precios* - Consult√° precios de productos\n` +
                `‚Ä¢ *Marcas* - Conoc√© nuestras marcas disponibles\n` +
                `‚Ä¢ *Agendar cita* - Reserv√° tu turno\n` +
                `‚Ä¢ *Obras sociales* - Informaci√≥n de cobertura\n` +
                `‚Ä¢ *Horarios* - Nuestros horarios de atenci√≥n`;

  // Buscar stock por c√≥digo - M√ÅS FLEXIBLE
  } else if (messageLower.startsWith('#') || 
             messageLower.startsWith('stock ') || 
             messageLower.includes('codigo') ||
             messageLower.includes('c√≥digo') ||
             (messageLower.length <= 10 && /[a-zA-Z]-\d+/i.test(messageLower))) {
    
    let code = '';
    if (messageLower.startsWith('#')) {
      code = mensaje.split('#')[1]?.trim();
    } else if (messageLower.startsWith('stock ')) {
      code = mensaje.split(' ')[1]?.trim();
    } else if (messageLower.includes('codigo') || messageLower.includes('c√≥digo')) {
      // Extraer c√≥digo despu√©s de "c√≥digo"
      const match = mensaje.match(/(codigo|c√≥digo)[:\s]*([a-zA-Z0-9-]+)/i);
      code = match ? match[2] : '';
    } else {
      code = messageLower;
    }
    
    if (!code) {
      respuesta = "‚ùå Por favor, dec√≠me el *c√≥digo del producto* que te interesa.\n\nEjemplo: *AC-274* o *#AC-274*";
    } else {
      respuesta = "üîç *Buscando el producto...* Un momento por favor.";
      // Guardar contexto para buscar
      contexto.paso = 2;
      contexto.datos.ultimaBusqueda = code;
      const product = await searchInSheet(code);
      
      if (product) {
        const descripcion = product.descripcion ? `\nüìù *Descripci√≥n:* ${product.descripcion}` : '';
        const solReceta = product.sol_receta ? `\nüëÅÔ∏è  *Tipo:* ${product.sol_receta}` : '';
        
        respuesta = `
üè∑Ô∏è  *C√≥digo:* ${product.codigo || 'N/A'}
üì¶  *Categor√≠a:* ${product.categoria}
üëì  *Marca:* ${product.marca || ''}
üîÑ  *Modelo:* ${product.modelo || ''}
üé®  *Color:* ${product.color || 'N/A'}${solReceta}${descripcion}
üìä  *Stock:* ${product.cantidad || '0'} unidades
üí≤  *Precio:* $${product.precio || 'Consultar'}
        `;
      } else {
        respuesta = "‚ùå *No encontr√© ese c√≥digo.* ¬øPodr√≠as verificarlo?\n\n" +
                   "O contame qu√© tipo de lente busc√°s y te ayudo a encontrar alternativas.";
      }
    }

  // Consulta sobre precios - CON DATOS REALES
  } else if (messageLower.includes('precio') || 
             messageLower.includes('cuesta') || 
             messageLower.includes('cuanto sale') ||
             messageLower.includes('valor') ||
             messageLower === 'precios') {
    
    const preciosReales = await obtenerPreciosReales();
    
    if (preciosReales) {
      respuesta = `üí≤ *Precios de armazones seg√∫n nuestro stock:*\n\n` +
                  `‚Ä¢ Desde: $${preciosReales.min.toLocaleString('es-AR')}\n` +
                  `‚Ä¢ Hasta: $${preciosReales.max.toLocaleString('es-AR')}\n` +
                  `‚Ä¢ Precio promedio: $${preciosReales.avg.toLocaleString('es-AR')}\n\n` +
                  `_Los precios var√≠an seg√∫n marca, material y caracter√≠sticas._\n\n` +
                  `¬øTe interesa alg√∫n modelo espec√≠fico? Dec√≠me el *c√≥digo* o describime lo que busc√°s.`;
    } else {
      respuesta = "üí≤ *Tenemos armazones para todos los presupuestos.*\n\n" +
                  "Los precios var√≠an seg√∫n:\n‚Ä¢ Marca\n‚Ä¢ Material (acetato, metal, etc.)\n‚Ä¢ Dise√±o\n‚Ä¢ Caracter√≠sticas especiales\n\n" +
                  "¬øTe interesa alg√∫n modelo en particular? Dec√≠me el *c√≥digo* o describime lo que busc√°s.";
    }

  // Consulta sobre marcas - SOLO MARCAS REALES
  } else if (messageLower.includes('marca') || 
             messageLower.includes('que marcas') ||
             messageLower.includes('qu√© marcas') ||
             messageLower.includes('marcas tienen')) {
    
    const marcasReales = await obtenerMarcasReales();
    
    if (marcasReales.length > 0) {
      // Mostrar m√°ximo 10 marcas para no saturar
      const marcasMostrar = marcasReales.slice(0, 10);
      respuesta = `üëì *Algunas de las marcas que trabajamos:*\n\n${marcasMostrar.map(m => `‚Ä¢ ${m}`).join('\n')}`;
      
      if (marcasReales.length > 10) {
        respuesta += `\n\n...y ${marcasReales.length - 10} marcas m√°s.`;
      }
      
      respuesta += `\n\n¬øTe interesa alguna marca en particular?`;
    } else {
      respuesta = "üëì *Trabajamos con diversas marcas de calidad.*\n\n¬øBusc√°s alguna marca espec√≠fica?";
    }

  // B√∫squeda por descripci√≥n - M√ÅS FLEXIBLE
  } else if (messageLower.includes('busco') || 
             messageLower.includes('quiero') || 
             messageLower.includes('tene') ||
             messageLower.includes('tienen') ||
             messageLower.includes('lente') ||
             messageLower.includes('lentes') ||
             messageLower.includes('anteojo') ||
             messageLower.includes('anteojos') ||
             messageLower.includes('gafa') ||
             messageLower.includes('gafas') ||
             messageLower.includes('vulk') ||
             messageLower.includes('ray-ban') ||
             messageLower.includes('oakley') ||
             messageLower.includes('sarkany') ||
             messageLower.includes('carter') ||
             messageLower.includes('redondo') || 
             messageLower.includes('cuadrado') || 
             messageLower.includes('ovalado') ||
             messageLower.includes('aviador') || 
             messageLower.includes('wayfarer') || 
             messageLower.includes('rectangular') ||
             messageLower.includes('metal') || 
             messageLower.includes('acetato') || 
             messageLower.includes('chico') ||
             messageLower.includes('grande') || 
             messageLower.includes('mediano') || 
             messageLower.includes('estilo') ||
             messageLower.includes('lente de contacto') || 
             messageLower.includes('lentilla') || 
             messageLower.includes('contacto')) {
    
    respuesta = "üîç *Buscando en nuestro stock...* Un momento por favor.";
    const productosEncontrados = await buscarPorDescripcion(mensaje);
    
    if (productosEncontrados.length > 0) {
      respuesta = `üîç *Encontr√© estas opciones para vos:*\n\n`;
      
      productosEncontrados.forEach((producto, index) => {
        const desc = producto.descripcion ? ` - ${producto.descripcion}` : '';
        respuesta += `${index + 1}. *${producto.codigo}* - ${producto.marca} ${producto.modelo}${desc} - $${producto.precio}\n`;
      });
      
      respuesta += `\n*Escrib√≠ el c√≥digo (ej: AC-274) para m√°s detalles de cada uno.*`;
    } else {
      respuesta = "‚ùå *No encontr√© productos que coincidan exactamente.*\n\n" +
                 "Prob√° ser m√°s espec√≠fico o contact√° a un asesor al *11 1234-5678*.\n\n" +
                 "Tambi√©n pod√©s:\n‚Ä¢ Decirme un c√≥digo espec√≠fico\n‚Ä¢ Visitarnos para ver todos los modelos";
    }

  // Obras sociales - INFORMACI√ìN COMPLETA ACTUALIZADA
  } else if (messageLower.includes('obra social') || messageLower.includes('prepaga') || 
             messageLower.includes('swiss') || messageLower.includes('medicus') ||
             messageLower.includes('construir') || messageLower.includes('osetya') ||
             messageLower.includes('cobertura') || messageLower.includes('beneficio') ||
             messageLower.includes('receta') || messageLower.includes('oftalmologo') ||
             messageLower.includes('medico') || messageLower.includes('cobertura')) {
    
    const obraDetectada = detectarObraSocial(mensaje);
    
    if (obraDetectada) {
      respuesta = `üè• *Trabajamos con ${obraDetectada}* ‚úÖ\n\nüìã *¬°Importante! Para usar tu obra social necesit√°s:*\n\n` +
                 `üëÅÔ∏è  *Receta m√©dica OBLIGATORIA* con:\n` +
                 `‚Ä¢ Nombre completo y matr√≠cula del oftalm√≥logo\n` +
                 `‚Ä¢ Tus datos personales (nombre, DNI)\n` +
                 `‚Ä¢ Datos de la obra social y n√∫mero de afiliado\n` +
                 `‚Ä¢ Diagn√≥stico claro y detallado\n\n` +
                 `üí° *Record√° que:*\n` +
                 `‚Ä¢ La receta tiene *validez de 60 d√≠as h√°biles*\n` +
                 `‚Ä¢ La obra social *solo cubre lo que indica la receta*\n` +
                 `‚Ä¢ Si dice "lente de lejos", no cubre lentes de cerca\n` +
                 `‚Ä¢ *No cubren lentes de contacto* con receta de armazones\n\n` +
                 `¬øTen√©s la receta? ¬°Acercate y te ayudamos con todo! üìû *11 1234-5678*`;
    } else {
      respuesta = `üè• *Obras Sociales que aceptamos:*\n\n${obrasSociales.map(os => `‚Ä¢ ${os}`).join('\n')}\n\n` +
                 `üìã *Requisitos importantes:*\n\n` +
                 `üëÅÔ∏è  *Necesit√°s receta m√©dica actualizada* (m√°ximo 60 d√≠as)\n` +
                 `‚Ä¢ Debe ser de un oftalm√≥logo matriculado\n` +
                 `‚Ä¢ Con todos tus datos y diagn√≥stico detallado\n` +
                 `‚Ä¢ Con datos de tu obra social y n√∫mero de afiliado\n\n` +
                 `¬øTen√©s alguna obra social en particular? Dec√≠me cu√°l y te doy m√°s info.`;
    }

  // Horarios de atenci√≥n
  } else if (messageLower.includes('horario') || messageLower.includes('hora') || messageLower.includes('cu√°ndo') ||
             messageLower.includes('abierto') || messageLower.includes('cierran') || messageLower.includes('atenci√≥n')) {
    
    respuesta = `‚è∞ *Nuestros horarios de atenci√≥n:*\n\n` +
               `üìÖ ${horariosAtencion.regular}\n` +
               `üëÅÔ∏è  *Adaptaci√≥n de lentes de contacto:* ${horariosAtencion.adaptacionLC}\n\n` +
               `üìç *Direcci√≥n:* Av. Corrientes 1234, CABA\n` +
               `üìû *Tel√©fono:* 11 1234-5678\n\n` +
               `¬øNecesit√°s agendar una cita?`;

  // Lentes de contacto - SIN PRECIOS FIJOS
  } else if (messageLower.includes('lente de contacto') || 
             messageLower.includes('lentilla') || 
             messageLower.includes('contacto')) {
    
    const marcasLC = await obtenerMarcasLC();
    
    respuesta = `üëÅÔ∏è  *Lentes de Contacto disponibles:*\n\n` +
               `üìã *Marcas que trabajamos:*\n${marcasLC.map(m => `‚Ä¢ ${m}`).join('\n')}\n\n` +
               `üí° *Importante:* Necesit√°s receta oftalmol√≥gica actualizada\n` +
               `‚è∞ *Adaptaci√≥n:* ${horariosAtencion.adaptacionLC}\n\n` +
               `¬øQu√© marca te interesa o ya us√°s alguna?`;

  // L√≠quidos para lentes de contacto - SIN PRECIOS FIJOS
  } else if (messageLower.includes('l√≠quido') || 
             messageLower.includes('liquido') || 
             messageLower.includes('soluci√≥n') || 
             messageLower.includes('solucion')) {
    
    const liquidos = await obtenerLiquidos();
    
    respuesta = `üß¥ *L√≠quidos para lentes de contacto:*\n\n` +
               `üì¶ *Productos disponibles:*\n${liquidos.map(l => `‚Ä¢ ${l.marca} ${l.tamano ? `- ${l.tamano}` : ''}`).join('\n')}\n\n` +
               `üí≤ *Precios promocionales* todos los meses\n` +
               `üéÅ *Descuentos* por cantidad\n\n` +
               `¬øTe interesa alg√∫n producto en particular?`;

  // Agradecimientos
  } else if (messageLower.includes('gracias') || messageLower.includes('thanks') || 
             messageLower.includes('genial') || messageLower.includes('perfecto')) {
    
    const emoji = personalidad.emojis[Math.floor(Math.random() * personalidad.emojis.length)];
    respuesta = `${emoji} ¬°De nada! Estoy aqu√≠ para ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?`;

  // Despedidas
  } else if (messageLower.includes('chau') || messageLower.includes('adi√≥s') || 
             messageLower.includes('bye') || messageLower.includes('nos vemos')) {
    
    respuesta = `üëã ¬°Fue un gusto ayudarte! No dudes en escribirme si ten√©s m√°s preguntas.\n\n` +
               `*Hypnottica* - Tu visi√≥n, nuestra pasi√≥n.`;

  // Fallback para mensajes no reconocidos
  } else {
    contexto.paso = 0; // Reiniciar contexto si no se entiende
    respuesta = `ü§î No estoy segura de entenderte. ¬øPodr√≠as decirlo de otra forma?\n\n` +
               `Pod√©s preguntarme por:\n‚Ä¢ Stock de productos\n‚Ä¢ Precios\n‚Ä¢ Marcas\n‚Ä¢ Horarios\n‚Ä¢ Obras sociales\n\n` +
      // Fallback para mensajes no reconocidos
  } else {
    contexto.paso = 0; // Reiniciar contexto si no se entiende
    respuesta = `ü§î No estoy segura de entenderte. ¬øPodr√≠as decirlo de otra forma?\n\n` +
               `Pod√©s preguntarme por:\n‚Ä¢ Stock de productos\n‚Ä¢ Precios\n‚Ä¢ Marcas\n‚Ä¢ Horarios\n‚Ä¢ Obras sociales\n\n` +
               `O escrib√≠ *"hola"* para ver todas las opciones.`;
  }

  // Guardar contexto actualizado
  contexto.historial.push({ mensaje, respuesta, timestamp: Date.now() });
  await guardarContextoUsuario(senderId, contexto);
  
  return respuesta;
}

// ==================== ENDPOINT PARA WEBHOOK DE WHATSAPP ====================
app.post('/webhook', async (req, res) => {
  try {
    // Verificar firma de Twilio si es necesario
    const twilioSignature = req.headers['x-twilio-signature'];
    const url = process.env.TWILIO_WEBHOOK_URL;
    
    if (process.env.TWILIO_AUTH_TOKEN && twilioSignature && url) {
      const isValid = twilio.validateRequest(
        process.env.TWILIO_AUTH_TOKEN,
        twilioSignature,
        url,
        req.body
      );
      
      if (!isValid) {
        return res.status(403).send('Invalid signature');
      }
    }
    
    // Obtener datos del mensaje
    const senderId = req.body.From;
    const message = req.body.Body;
    
    if (!senderId || !message) {
      return res.status(400).send('Missing parameters');
    }
    
    console.log(`üì© Mensaje de ${senderId}: ${message}`);
    
    // Obtener contexto del usuario
    const contexto = await obtenerContextoUsuario(senderId);
    
    // Procesar mensaje con timeout para evitar demoras
    const respuesta = await Promise.race([
      procesarMensaje(message, contexto, senderId),
      new Promise((resolve) => setTimeout(() => resolve("‚è∞ Estoy procesando tu consulta..."), 8000))
    ]);
    
    // Responder con Twilio
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message(respuesta);
    
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
    
  } catch (error) {
    console.error('Error en webhook:', error);
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message('‚ùå Ocurri√≥ un error. Por favor, intent√° nuevamente en un momento.');
    
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
  }
});

// ==================== ENDPOINT PARA VERIFICACI√ìN DEL WEBHOOK ====================
app.get('/webhook', (req, res) => {
  // Verificaci√≥n para Twilio
  if (req.query && req.query['hub.verify_token'] === process.env.VERIFY_TOKEN) {
    res.status(200).send(req.query['hub.challenge']);
  } else {
    res.status(403).send('Error en token de verificaci√≥n');
  }
});

// ==================== ENDPOINT DE SALUD ====================
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    name: personalidad.nombre,
    users: redisClient ? 'Redis' : 'Memoria (' + memoriaUsuarios.size + ' usuarios)'
  });
});

// ==================== INICIAR SERVIDOR ====================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ü§ñ ${personalidad.nombre} est√° funcionando en el puerto ${PORT}`);
  console.log(`üëì Bot de WhatsApp para √≥ptica listo para usar`);
});

// Manejo de errores no capturados
process.on('unhandledRejection', (err) => {
  console.error('Error no manejado:', err);
});

process.on('uncaughtException', (err) => {
  console.error('Excepci√≥n no capturada:', err);
});
