require('dotenv').config();
const express = require('express');
const app = express();

app.use(express.json());

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'Servidor funcionando',
    timestamp: new Date().toISOString()
  });
});

// Endpoint de chat MEJORADO
app.post('/api/chat', async (req, res) => {
  try {
    const { userId, message } = req.body;
    
    console.log('Mensaje recibido:', { userId, message });
    
    const mensajeLower = message.toLowerCase();
    let respuesta = '';

    if (mensajeLower.includes('hola') || mensajeLower.includes('buenas')) {
      respuesta = '¬°Hola! Soy Luna üëã, asistente de Hypnottica. ¬øEn qu√© puedo ayudarte?\n\nPod√©s consultar:\n‚Ä¢ üëì Armazones en stock\n‚Ä¢ üëÅÔ∏è Lentes de contacto\n‚Ä¢ üß¥ L√≠quidos y accesorios\n‚Ä¢ üí∞ Precios\n‚Ä¢ üìç Direcci√≥n y horarios';

    } else if (mensajeLower.includes('marca') || mensajeLower.includes('armazon') || 
               mensajeLower.includes('ray-ban') || mensajeLower.includes('oakley') || 
               mensajeLower.includes('vulk') || mensajeLower.includes('sarkany')) {
      
      respuesta = `üëì **Marcas que trabajamos:**\n\n‚Ä¢ Ray-Ban\n‚Ä¢ Oakley\n‚Ä¢ Vulk\n‚Ä¢ Sarkany\n‚Ä¢ Y muchas m√°s\n\n¬øTe interesa ver disponibilidad de alguna marca en particular?`;

    } else if (mensajeLower.includes('stock') || mensajeLower.includes('disponible') || 
               mensajeLower.includes('tienen') || mensajeLower.includes('modelo')) {
      
      respuesta = 'üì¶ Para consultar stock espec√≠fico, necesito que me digas:\n\n‚Ä¢ Qu√© marca te interesa (Ray-Ban, Oakley, Vulk, etc.)\n‚Ä¢ O alg√∫n modelo en particular\n\n¬øQu√© est√°s buscando?';

    } else if (mensajeLower.includes('lente') && mensajeLower.includes('contacto')) {
      respuesta = `üëÅÔ∏è **Lentes de contacto disponibles:**\n\n‚Ä¢ Acuvue Oasis (Mensuales/Diarios)\n‚Ä¢ Biofinity (Mensuales)\n‚Ä¢ Air Optix (Mensuales)\n\n¬øTe interesa alguna marca?`;

    } else if (mensajeLower.includes('liquido') || mensajeLower.includes('solucion')) {
      respuesta = `üß¥ **L√≠quidos y soluciones:**\n\n‚Ä¢ Soluci√≥n Multiuso (Renu, Opti-Free)\n‚Ä¢ Gotas Humectantes (Systane, Blink)\n‚Ä¢ Per√≥xido (Ao Sept, Clear Care)\n\n¬øQu√© tipo de l√≠quido necesit√°s?`;

    } else if (mensajeLower.includes('precio') || mensajeLower.includes('cuesta') || mensajeLower.includes('valor')) {
      respuesta = `üí∞ **Rangos de precios:**\n\nüëì Armazones: $55.000 - $370.000\nüëÅÔ∏è Lentes de contacto: $15.000 - $25.000\nüß¥ L√≠quidos: $3.500 - $7.000\n\n*Los precios var√≠an seg√∫n marca y caracter√≠sticas.*`;

    } else if (mensajeLower.includes('direccion') || mensajeLower.includes('ubicacion')) {
      respuesta = 'üìç **Hypnottica √ìptica**\nSerrano 684, Villa Crespo, CABA\nüöá A 4 cuadras de √Ångel Gallardo (L√≠nea B)\nüìû 1132774631';

    } else if (mensajeLower.includes('horario')) {
      respuesta = '‚è∞ **Horarios de atenci√≥n:**\nLunes a S√°bado: 10:30 - 19:30\n\n¬øTe sirve alg√∫n d√≠a en particular?';

    } else if (mensajeLower.includes('obra social')) {
      respuesta = 'üè• **Obras sociales que aceptamos:**\n\n‚Ä¢ Medicus\n‚Ä¢ Osetya\n‚Ä¢ Construir Salud\n‚Ä¢ Swiss Medical\n\n¬øTen√©s alguna en particular?';

    } else {
      respuesta = `ü§î No estoy segura de entender "${message}".\n\nPod√©s preguntarme por:\n‚Ä¢ Marcas y modelos de armazones\n‚Ä¢ Stock disponible\n‚Ä¢ Precios\n‚Ä¢ Lentes de contacto\n‚Ä¢ L√≠quidos y accesorios\n‚Ä¢ Horarios y direcci√≥n`;
    }
    
    res.json({
      success: true,
      response: respuesta,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error en /api/chat:', error);
    res.status(500).json({
      success: false,
      response: '‚ö†Ô∏è Estoy teniendo dificultades t√©cnicas. Por favor, intent√° nuevamente.',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Probador web SUPER SIMPLE
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Probador Bot</title>
        <meta charset="UTF-8">
        <style>
            body { 
                font-family: Arial, sans-serif; 
                max-width: 800px; 
                margin: 0 auto; 
                padding: 20px; 
                background: #f5f5f5;
            }
            .container {
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .chat-box {
                height: 400px;
                border: 1px solid #ddd;
                padding: 15px;
                margin: 20px 0;
                overflow-y: auto;
                background: #fafafa;
            }
            .message {
                margin: 10px 0;
                padding: 10px;
                border-radius: 10px;
                max-width: 80%;
            }
            .user-message {
                background: #007bff;
                color: white;
                margin-left: auto;
            }
            .bot-message {
                background: #e9ecef;
                color: #333;
                margin-right: auto;
                white-space: pre-line;
            }
            .input-container {
                display: flex;
                gap: 10px;
            }
            input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
            }
            button {
                padding: 10px 20px;
                background: #007bff;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
            .quick-buttons {
                display: flex;
                gap: 10px;
                margin: 10px 0;
                flex-wrap: wrap;
            }
            .quick-btn {
                padding: 8px 12px;
                background: #28a745;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 12px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Probador - Hypnottica Bot</h1>
            <p>Prob√° el bot con estos mensajes r√°pidos:</p>
            
            <div class="quick-buttons">
                <button class="quick-btn" onclick="enviarMensaje('Hola')">üëã Hola</button>
                <button class="quick-btn" onclick="enviarMensaje('Marcas de armazones')">üëì Marcas</button>
                <button class="quick-btn" onclick="enviarMensaje('Precios')">üí∞ Precios</button>
                <button class="quick-btn" onclick="enviarMensaje('Lentes de contacto')">üëÅÔ∏è Lentes contacto</button>
                <button class="quick-btn" onclick="enviarMensaje('Horarios')">‚è∞ Horarios</button>
                <button class="quick-btn" onclick="enviarMensaje('Obras sociales')">üè• Obras sociales</button>
            </div>
            
            <div class="chat-box" id="chatBox">
                <div class="message bot-message">
                    ¬°Hola! Soy Luna. Escrib√≠ un mensaje o us√° los botones de arriba.
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Escribe tu mensaje...">
                <button onclick="enviarMensaje()">Enviar</button>
            </div>
        </div>

        <script>
            function agregarMensaje(texto, esUsuario = false) {
                const chatBox = document.getElementById('chatBox');
                const mensaje = document.createElement('div');
                mensaje.className = esUsuario ? 'message user-message' : 'message bot-message';
                mensaje.textContent = texto;
                chatBox.appendChild(mensaje);
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            async function enviarMensaje(mensajePredefinido = null) {
                const input = document.getElementById('messageInput');
                const mensaje = mensajePredefinido || input.value.trim();
                
                if (!mensaje) return;
                
                if (!mensajePredefinido) {
                    input.value = '';
                }
                
                agregarMensaje(mensaje, true);
                
                try {
                    const respuesta = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            userId: 'user-' + Date.now(),
                            message: mensaje
                        })
                    });
                    
                    const datos = await respuesta.json();
                    
                    if (datos.success) {
                        agregarMensaje(datos.response);
                    } else {
                        agregarMensaje('Error: ' + (datos.error || 'Desconocido'));
                    }
                    
                } catch (error) {
                    agregarMensaje('Error de conexi√≥n con el servidor');
                }
            }

            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    enviarMensaje();
                }
            });
        </script>
    </body>
    </html>
  `);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log('üöÄ Servidor funcionando en puerto ' + PORT);
  console.log('üåê Probador: https://tu-bot.onrender.com');
  console.log('‚ù§Ô∏è  Health: https://tu-bot.onrender.com/health');
});

module.exports = app;
