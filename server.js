const express = require('express');
const twilio = require('twilio');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const app = express();

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ==================== CONFIGURACI√ìN INICIAL ====================
const personalidad = {
  nombre: "Luna",
  emojis: ["üëã", "üëì", "üîç", "üí°", "üìç", "‚è≥", "üíé", "üîä", "üåü", "üìå", "üè•"],
  velocidadRespuesta: { min: 800, max: 2500 }
};

// Obras sociales que aceptan
const obrasSociales = [
  "Swiss Medical",
  "Medicus",
  "Construir Salud",
  "Osetya"
];

// Sistema de memoria adaptable
let memoriaUsuarios = new Map();
let redisClient = null;

// Intentar conectar a Redis si existe la URL
(async () => {
  if (process.env.REDIS_URL) {
    try {
      const redis = require('redis');
      redisClient = redis.createClient({
        url: process.env.REDIS_URL,
        socket: {
          connectTimeout: 10000,
          timeout: 10000
        }
      });
      
      redisClient.on('error', (err) => {
        console.log('Redis usando memoria vol√°til:', err.message);
        redisClient = null;
      });
      
      await redisClient.connect();
      console.log('‚úÖ Conectado a Redis Cloud');
    } catch (error) {
      console.log('‚ùå Redis no disponible, usando memoria vol√°til');
      redisClient = null;
    }
  } else {
    console.log('‚ÑπÔ∏è  REDIS_URL no configurada, usando memoria vol√°til');
  }
})();

// ==================== FUNCIONES DE MEMORIA ====================
async function obtenerContextoUsuario(senderId) {
  try {
    if (redisClient) {
      const contexto = await redisClient.get(`contexto:${senderId}`);
      return contexto ? JSON.parse(contexto) : { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    } else {
      return memoriaUsuarios.get(senderId) || { 
        paso: 0, 
        datos: {}, 
        ultimaInteraccion: Date.now(),
        historial: [] 
      };
    }
  } catch (error) {
    console.error('Error obteniendo contexto:', error);
    return { paso: 0, datos: {}, ultimaInteraccion: Date.now(), historial: [] };
  }
}

async function guardarContextoUsuario(senderId, contexto) {
  try {
    contexto.ultimaInteraccion = Date.now();
    
    if (redisClient) {
      await redisClient.setex(`contexto:${senderId}`, 3600, JSON.stringify(contexto));
    } else {
      memoriaUsuarios.set(senderId, contexto);
    }
  } catch (error) {
    console.error('Error guardando contexto:', error);
  }
}

// ==================== FUNCI√ìN PARA OBTENER PRODUCTOS (ESTRUCTURA EXACTA) ====================
async function obtenerProductosDeSheet(sheetTitle) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    // FORMA CORRECTA DE AUTENTICACI√ìN
    const credentials = require(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    await doc.useServiceAccountAuth(credentials);
    
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[sheetTitle];
    if (!sheet) {
      console.error(`No se encontr√≥ la hoja: '${sheetTitle}'`);
      return [];
    }
    
    // Cargar filas a partir de la fila 4 (√≠ndice 3 para getRows)
    const rows = await sheet.getRows();
    
    const productos = [];
    
    // Leer cada fila empezando desde la fila 4 (√≠ndice 3 en el array)
    for (let i = 3; i < rows.length; i++) {
      const row = rows[i];
      
      // Leer las columnas EXACTAS como est√°n en tu sheet
      const codigo = row['F'] || ''; // F = COD. HYPNO (columna F)
      const marca = row['C'] || '';  // C = Marca (columna C)
      const solReceta = row['E'] || ''; // E = Sol/Receta (columna E)
      const modelo = row['G'] || ''; // G = Modelo (columna G)
      const color = row['H'] || '';  // H = Color (columna H)
      const cantidad = row['I'] || '0'; // I = Cantidad (columna I)
      const precio = row['P'] || ''; // P = PRECIO (columna P)
      const descripcion = row['T'] || ''; // T = Descripciones (columna T)
      
      // Solo agregar productos que tengan marca o modelo
      if (marca.trim() !== '' || modelo.trim() !== '') {
        productos.push({
          codigo: codigo.trim(),
          marca: marca.trim(),
          sol_receta: solReceta.trim(),
          modelo: modelo.trim(),
          color: color.trim(),
          cantidad: cantidad.trim(),
          precio: precio.trim(),
          descripcion: descripcion.trim(),
          categoria: sheetTitle
        });
      }
    }
    
    console.log(`‚úÖ Obtenidos ${productos.length} productos de ${sheetTitle}`);
    return productos;
  } catch (error) {
    console.error(`Error obteniendo productos de ${sheetTitle}:`, error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER TODOS LOS PRODUCTOS ====================
async function obtenerTodosProductos() {
  try {
    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    let todosProductos = [];
    
    for (const sheet of sheets) {
      const productos = await obtenerProductosDeSheet(sheet);
      todosProductos = todosProductos.concat(productos);
    }
    
    console.log(`üìä Total de productos en stock: ${todosProductos.length}`);
    return todosProductos;
  } catch (error) {
    console.error('Error obteniendo todos los productos:', error);
    return [];
  }
}

// ==================== FUNCI√ìN PARA OBTENER MARCAS REALES ====================
async function obtenerMarcasReales() {
  try {
    const productos = await obtenerTodosProductos();
    const marcas = new Set();
    
    productos.forEach(producto => {
      if (producto.marca && producto.marca.trim() !== '') {
        marcas.add(producto.marca.trim());
      }
    });
    
    const marcasArray = Array.from(marcas).sort();
    console.log(`üè∑Ô∏è Marcas detectadas: ${marcasArray.join(', ')}`);
    return marcasArray;
  } catch (error) {
    console.error('Error obteniendo marcas:', error);
    return [];
  }
}

// ==================== FUNCI√ìN OPENAI (GPT-4o-mini) ====================
async function consultarIA(prompt) {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  if (!OPENAI_API_KEY) {
    console.error("OpenAI API Key no configurada");
    return "";
  }
  
  const url = 'https://api.openai.com/v1/chat/completions';

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{
          role: 'user', 
          content: prompt
        }],
        max_tokens: 150,
        temperature: 0.3
      })
    });

    const data = await response.json();
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
      return data.choices[0].message.content;
    } else {
      return "";
    }
    
  } catch (error) {
    console.error("Error calling OpenAI:", error);
    return "";
  }
}

// ==================== FUNCI√ìN BUSCAR EN SHEETS (ESTRUCTURA EXACTA) ====================
async function searchInSheet(code) {
  try {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID);
    
    // FORMA CORRECTA DE AUTENTICACI√ìN
    const credentials = require(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
    await doc.useServiceAccountAuth(credentials);
    
    await doc.loadInfo();

    const sheets = [
      process.env.SHEETS_ARMAZONES || 'STOCK ARMAZONES 1',
      process.env.SHEETS_ACCESORIOS,
      process.env.SHEETS_LC,
      process.env.SHEETS_LIQUIDOS
    ].filter(Boolean);

    for (const sheetTitle of sheets) {
      const sheet = doc.sheetsByTitle[sheetTitle];
      if (!sheet) continue;

      const rows = await sheet.getRows();
      
      // Buscar en todas las filas a partir de la fila 4
      for (let i = 3; i < rows.length; i++) {
        const row = rows[i];
        const rowCode = row['F'] || ''; // COD. HYPNO en columna F
        
        if (rowCode && rowCode.trim().toLowerCase() === code.trim().toLowerCase()) {
          return {
            categoria: sheetTitle,
            codigo: rowCode.trim(),
            marca: (row['C'] || '').trim(), // Marca en columna C
            sol_receta: (row['E'] || '').trim(), // Sol/Receta en columna E
            modelo: (row['G'] || '').trim(), // Modelo en columna G
            color: (row['H'] || '').trim(), // Color en columna H
            cantidad: (row['I'] || '0').trim(), // Cantidad en columna I
            precio: (row['P'] || '').trim(), // PRECIO en columna P
            descripcion: (row['T'] || '').trim() // Descripciones en columna T
          };
        }
      }
    }
    
    console.log(`‚ùå C√≥digo no encontrado: ${code}`);
    return null;
  } catch (error) {
    console.error('Error buscando en Sheet:', error);
    return null;
  }
}

// ==================== B√öSQUEDA INTELIGENTE POR DESCRIPCI√ìN ====================
async function buscarPorDescripcion(descripcion) {
  try {
    const todosProductos = await obtenerTodosProductos();
    
    // Filtrar productos con stock
    const productosConStock = todosProductos.filter(p => {
      const stock = parseInt(p.cantidad) || 0;
      return stock > 0;
    });
    
    if (productosConStock.length === 0) {
      console.log('‚ö†Ô∏è No hay productos con stock');
      return [];
    }
    
    const prompt = `Cliente busca: "${descripcion}".

Productos disponibles en stock (formato: CODIGO|MARCA|MODELO|COLOR|PRECIO|CATEGORIA|DESCRIPCION):
${productosConStock.map(p => 
  `${p.codigo}|${p.marca}|${p.modelo}|${p.color}|${p.precio}|${p.categoria}|${p.descripcion}`
).join('\n')}

INSTRUCCIONES CR√çTICAS:
1. Busc√° productos que coincidan con la descripci√≥n del cliente
2. Consider√° la DESCRIPCI√ìN de cada producto
3. Si no hay coincidencia exacta, busc√° ALGO SIMILAR
4. Respond√© SOLO con los c√≥digos separados por coma

Ejemplo: "AC-123, XY-456, ZZ-789"`;

    const respuestaIA = await consultarIA(prompt);
    
    const codigos = respuestaIA.split(',').map(cod => cod.trim()).filter(cod => cod !== '');
    
    const productosEncontrados = [];
    for (const codigo of codigos.slice(0, 3)) {
      const producto = productosConStock.find(p => p.codigo && p.codigo.toLowerCase() === codigo.toLowerCase());
      if (producto) productosEncontrados.push(producto);
    }
    
    console.log(`üîç B√∫squeda: "${descripcion}" -> Encontrados: ${productosEncontrados.length} productos`);
    return productosEncontrados;
    
  } catch (error) {
    console.error('Error en b√∫squeda inteligente:', error);
    return [];
  }
}

// ==================== SISTEMA DE FALLBACK ====================
const respuestasFallback = [
  "No estoy segura de entenderte completamente. ¬øPodr√≠as reformular tu pregunta?",
  "Quiero asegurarme de ayudarte bien. ¬øTe refieres a informaci√≥n sobre stock, precios o agendar una cita?",
  "Perdon√°, no capt√© eso. ¬øPodr√≠as decirlo de otra forma?",
  "Voy a derivarte con un especialista que te puede ayudar mejor con eso.",
  "¬øPodr√≠as contarme m√°s espec√≠ficamente qu√© necesitas? As√≠ puedo ayudarte mejor."
];

function obtenerFallbackAleatorio() {
  return respuestasFallback[Math.floor(Math.random() * respuestasFallback.length)];
}

// ==================== DETECTAR OBRA SOCIAL EN MENSAJE ====================
function detectarObraSocial(mensaje) {
  const msg = mensaje.toLowerCase();
  const obrasDetectadas = obrasSociales.filter(obra => 
    msg.includes(obra.toLowerCase())
  );
  
  return obrasDetectadas.length > 0 ? obrasDetectadas[0] : null;
}

// ==================== DETECTAR MARCA EN MENSAJE ====================
async function detectarMarca(mensaje) {
  try {
    const marcasReales = await obtenerMarcasReales();
    const msg = mensaje.toLowerCase();
    
    const marcaDetectada = marcasReales.find(marca => 
      msg.includes(marca.toLowerCase())
    );
    
    return marcaDetectada || null;
  } catch (error) {
    console.error('Error detectando marca:', error);
    return null;
  }
}

// ==================== PROCESAMIENTO PRINCIPAL DE MENSAJES ====================
async function procesarMensaje(mensaje, contexto, senderId) {
  const messageLower = mensaje.toLowerCase();
  let respuesta = '';

  // Saludo inicial
  if (messageLower.includes('hola') || messageLower === 'hi' || messageLower === 'üëã') {
    contexto.paso = 0;
    const emoji = personalidad.emojis[Math.floor(Math.random() * personalidad.emojis.length)];
    respuesta = `${emoji} ¬°Hola! Soy ${personalidad.nombre}, tu asistente de *Hypnottica*. ¬øEn qu√© puedo ayudarte hoy?\n\n‚Ä¢ Consultar stock\n‚Ä¢ Precios\n‚Ä¢ Agendar cita\n‚Ä¢ Obras sociales\n‚Ä¢ Ubicaci√≥n y horarios`;

  // Buscar stock por c√≥digo
  } else if (messageLower.startsWith('#stock ') || messageLower.startsWith('stock ')) {
    let code = messageLower.startsWith('#stock ') ? mensaje.split(' ')[1] : mensaje.split(' ')[1];
    
    if (!code) {
      respuesta = "‚ùå Contame el c√≥digo del modelo que te interesa, por ejemplo: \"AC-274\"";
    } else {
      const product = await searchInSheet(code);
      
      if (product) {
        const descripcion = product.descripcion ? `\nüìù *Descripci√≥n:* ${product.descripcion}` : '';
        const solReceta = product.sol_receta ? `\nüëÅÔ∏è  *Tipo:* ${product.sol_receta}` : '';
        
        respuesta = `
üè∑Ô∏è  *C√≥digo:* ${product.codigo || 'N/A'}
üì¶  *Categor√≠a:* ${product.categoria}
üëì  *Marca:* ${product.marca || ''}
üîÑ  *Modelo:* ${product.modelo || ''}
üé®  *Color:* ${product.color || 'N/A'}${solReceta}${descripcion}
üìä  *Stock:* ${product.cantidad || '0'} unidades
üí≤  *Precio:* $${product.precio || 'N/A'}
        `;
      } else {
        respuesta = "‚ùå *Producto no encontrado.* Verific√° el c√≥digo o describime lo que busc√°s.";
      }
    }

  // B√∫squeda por descripci√≥n
  } else if (messageLower.includes('busco') || messageLower.includes('quiero') || messageLower.includes('tene') ||
             messageLower.includes('redondo') || messageLower.includes('cuadrado') || messageLower.includes('ovalado') ||
             messageLower.includes('aviador') || messageLower.includes('wayfarer') || messageLower.includes('rectangular') ||
             messageLower.includes('metal') || messageLower.includes('acetato') || messageLower.includes('chico') ||
             messageLower.includes('grande') || messageLower.includes('mediano') || messageLower.includes('estilo')) {
    
    respuesta = "üîç *Buscando en nuestro stock...* Un momento por favor.";
    const productosEncontrados = await buscarPorDescripcion(mensaje);
    
    if (productosEncontrados.length > 0) {
      respuesta = `üîç *Encontr√© estas opciones para vos:*\n\n`;
      
      productosEncontrados.forEach((producto, index) => {
        const desc = producto.descripcion ? ` - ${producto.descripcion}` : '';
        respuesta += `${index + 1}. *${producto.codigo}* - ${producto.marca} ${producto.modelo}${desc} - $${producto.precio}\n`;
      });
      
      respuesta += `\n*Escrib√≠ #stock [c√≥digo] para m√°s detalles de cada uno.*`;
    } else {
      respuesta = "‚ùå *No encontr√© productos que coincidan.*\n\nProb√° ser m√°s espec√≠fico o contact√° a un asesor al *11 1234-5678*.";
    }

  // Obras sociales
  } else if (messageLower.includes('obra social') || messageLower.includes('prepaga') || 
             messageLower.includes('swiss') || messageLower.includes('medicus') ||
             messageLower.includes('construir') || messageLower.includes('osetya') ||
             messageLower.includes('cobertura') || messageLower.includes('beneficio')) {
    
    const obraDetectada = detectarObraSocial(mensaje);
    
    if (obraDetectada) {
      respuesta = `üè• *Trabajamos con ${obraDetectada}* ‚úÖ\n\nPod√©s acercarte con tu credencial y te ayudamos con todo el tr√°mite. Tambi√©n pod√©s consultarnos por WhatsApp al *11 1234-5678* para m√°s informaci√≥n.`;
    } else {
      respuesta = `üè• *Obras Sociales que aceptamos:*\n\n${obrasSociales.map(os => `‚Ä¢ ${os}`).join('\n')}\n\n¬øTen√©s alguna de estas? Pod√©s acercarte con tu credencial y te ayudamos con el tr√°mite.`;
    }

  // Marcas espec√≠ficas
  } else if (await detectarMarca(messageLower)) {
    const marca = await detectarMarca(messageLower);
    respuesta = `‚úÖ *S√≠, trabajamos con ${marca}* üëì\n\nTenemos varios modelos disponibles. ¬øBusc√°s algo en particular de ${marca} o quer√©s que te muestre opciones?`;

  // Marcas disponibles
  } else if (messageLower.includes('marca') || messageLower.includes('que tienen') || messageLower.includes('que marcas')) {
    
    try {
      const marcasReales = await obtenerMarcasReales();
      if (marcasReales.length > 0) {
        respuesta = `üëì *Marcas que trabajamos:*\n\n${marcasReales.map(m => `‚Ä¢ ${m}`).join('\n')}\n\n¬øTe interesa alguna en particular?`;
      } else {
        respuesta = "‚úÖ Trabajamos con las mejores marcas del mercado. ¬øBusc√°s alguna en particular?";
      }
    } catch (error) {
      respuesta = "‚úÖ Trabajamos con las mejores marcas del mercado. ¬øBusc√°s alguna en particular?";
    }

  // Agendar turno
  } else if (messageLower.includes('agendar') || messageLower.includes('turno') || messageLower.includes('cita')) {
    respuesta = "üìÖ Para agendar una cita, pod√©s llamarnos al *11 1234-5678* o visitarnos en *Serrano 684, Villa Crespo*.";

  // Direcci√≥n u horarios
  } else if (messageLower.includes('direcci√≥n') || messageLower.includes('donde') || messageLower.includes('ubic')) {
    respuesta = "üìç *HYPNOTTICA*\nSerrano 684, Villa Crespo. CABA.\n\n*Horarios:*\nLunes a S√°bados: 10:30 - 19:30\n\n*Tel√©fono:* 11 1234-5678";

  // Precios
  } else if (messageLower.includes('precio') || messageLower.includes('cuesta') || messageLower.includes('valor')) {
    respuesta = "üíé *Tenemos precios para todos los presupuestos*\n\nDesde armazones econ√≥micos hasta primeras marcas. ¬øBusc√°s algo en particular o quer√©s que te recomiende seg√∫n tu presupuesto?";

  } else {
    // Consulta a IA con informaci√≥n real
    try {
      const marcasReales = await obtenerMarcasReales();
      const marcasTexto = marcasReales.join(', ');
      
      const promptIA = `Eres ${personalidad.nombre}, asistente de Hypnottica √≥ptica.
INFORMACI√ìN REAL:
- Marcas disponibles: ${marcasTexto}
- Obras sociales: ${obrasSociales.join(', ')}
- Direcci√≥n: Serrano 684, Villa Crespo, CABA
- Horarios: Lunes a S√°bados 10:30-19:30
- Tel√©fono: 11 1234-5678

Cliente pregunta: "${mensaje}".
Responde de manera profesional con informaci√≥n verificada. Si no sab√©s algo, dec√≠ la verdad.`;

      respuesta = await consultarIA(promptIA);
      
      if (!respuesta || respuesta.length < 5) {
        respuesta = obtenerFallbackAleatorio();
      }
    } catch (error) {
      respuesta = obtenerFallbackAleatorio();
    }
  }

  return respuesta;
}

// ==================== RUTA PRINCIPAL WHATSAPP ====================
app.post('/webhook', async (req, res) => {
  try {
    const incomingMessage = req.body.Body.trim();
    const senderId = req.body.From;
    console.log(`üì© Mensaje de ${senderId}: ${incomingMessage}`);

    const contexto = await obtenerContextoUsuario(senderId);
    const responseMessage = await procesarMensaje(incomingMessage, contexto, senderId);
    await guardarContextoUsuario(senderId, contexto);
    
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message(responseMessage);
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
    
  } catch (error) {
    console.error('Error en el servidor:', error);
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message('‚ö†Ô∏è Estoy teniendo problemas t√©cnicos. Por favor, intent√° de nuevo.');
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
  }
});

// ==================== RUTAS ADICIONALES ====================
app.get('/status', async (req, res) => {
  try {
    const marcasReales = await obtenerMarcasReales();
    
    res.json({ 
      status: 'ok', 
      name: personalidad.nombre,
      version: '2.3',
      redis: redisClient ? 'conectado' : 'memoria vol√°til',
      obras_sociales: obrasSociales,
      marcas_disponibles: marcasReales,
      total_marcas: marcasReales.length
    });
  } catch (error) {
    res.json({ 
      status: 'ok', 
      name: personalidad.nombre,
      version: '2.3',
      redis: redisClient ? 'conectado' : 'memoria vol√°til',
      obras_sociales: obrasSociales
    });
  }
});

app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// ==================== INICIO SERVIDOR ====================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ü§ñ ${personalidad.nombre} escuchando en puerto ${PORT}`);
  console.log(`‚≠ê Bot v2.3 - Con estructura exacta del Google Sheet`);
  console.log(`üè• Obras sociales: ${obrasSociales.join(', ')}`);
  console.log(`üìä Leyendo columnas: C(Marca), E(Sol/Receta), F(COD.HYPNO), G(Modelo), H(Color), I(Cantidad), P(PRECIO), T(Descripciones)`);
});
